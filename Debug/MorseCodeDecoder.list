
MorseCodeDecoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007890  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e88  08007e88  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e90  08007e90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a2c  20000078  08007f10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aa4  08007f10  00024aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a198  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003696  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004198  00000000  00000000  000402c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a70  00000000  00000000  00044458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de251  00000000  00000000  0005dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  0013c16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a48 	.word	0x08007a48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007a48 	.word	0x08007a48

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fd82 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f866 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f8fc 	bl	80007dc <MX_GPIO_Init>

  MX_USART2_UART_Init();
 80005e4:	f000 f8d0 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f003 fa3a 	bl	8003a60 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue1_attributes);
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <main+0x90>)
 80005ee:	2102      	movs	r1, #2
 80005f0:	2010      	movs	r0, #16
 80005f2:	f003 fb2c 	bl	8003c4e <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <main+0x94>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of Queue2_1 */
  Queue2_1Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue2_1_attributes);
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <main+0x98>)
 80005fe:	2102      	movs	r1, #2
 8000600:	2010      	movs	r0, #16
 8000602:	f003 fb24 	bl	8003c4e <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <main+0x9c>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of Queue2_2 */
  Queue2_2Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue2_2_attributes);
 800060c:	4a19      	ldr	r2, [pc, #100]	; (8000674 <main+0xa0>)
 800060e:	2102      	movs	r1, #2
 8000610:	2010      	movs	r0, #16
 8000612:	f003 fb1c 	bl	8003c4e <osMessageQueueNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <main+0xa4>)
 800061a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_Temp, NULL, &Task1_attributes);
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <main+0xa8>)
 800061e:	2100      	movs	r1, #0
 8000620:	4817      	ldr	r0, [pc, #92]	; (8000680 <main+0xac>)
 8000622:	f003 fa67 	bl	8003af4 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a16      	ldr	r2, [pc, #88]	; (8000684 <main+0xb0>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_Temp, NULL, &Task2_attributes);
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <main+0xb4>)
 800062e:	2100      	movs	r1, #0
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <main+0xb8>)
 8000632:	f003 fa5f 	bl	8003af4 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a15      	ldr	r2, [pc, #84]	; (8000690 <main+0xbc>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_Temp, NULL, &Task3_attributes);
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <main+0xc0>)
 800063e:	2100      	movs	r1, #0
 8000640:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0xc4>)
 8000642:	f003 fa57 	bl	8003af4 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <main+0xc8>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(Task4_Temp, NULL, &Task4_attributes);
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <main+0xcc>)
 800064e:	2100      	movs	r1, #0
 8000650:	4814      	ldr	r0, [pc, #80]	; (80006a4 <main+0xd0>)
 8000652:	f003 fa4f 	bl	8003af4 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <main+0xd4>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f003 fa24 	bl	8003aa8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x8c>
 8000662:	bf00      	nop
 8000664:	08007c70 	.word	0x08007c70
 8000668:	200000e8 	.word	0x200000e8
 800066c:	08007c88 	.word	0x08007c88
 8000670:	200000ec 	.word	0x200000ec
 8000674:	08007ca0 	.word	0x08007ca0
 8000678:	200000f0 	.word	0x200000f0
 800067c:	08007be0 	.word	0x08007be0
 8000680:	0800096d 	.word	0x0800096d
 8000684:	200000d8 	.word	0x200000d8
 8000688:	08007c04 	.word	0x08007c04
 800068c:	08000a71 	.word	0x08000a71
 8000690:	200000dc 	.word	0x200000dc
 8000694:	08007c28 	.word	0x08007c28
 8000698:	08000b31 	.word	0x08000b31
 800069c:	200000e0 	.word	0x200000e0
 80006a0:	08007c4c 	.word	0x08007c4c
 80006a4:	08000cb5 	.word	0x08000cb5
 80006a8:	200000e4 	.word	0x200000e4

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fb13 	bl	8006ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <SystemClock_Config+0xd4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <SystemClock_Config+0xd4>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <SystemClock_Config+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SystemClock_Config+0xd8>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000720:	2310      	movs	r3, #16
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000724:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072a:	2304      	movs	r3, #4
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fbec 	bl	8001f18 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000746:	f000 facf 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f85a 	bl	8001820 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000772:	f000 fab9 	bl	8000ce8 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 f8f6 	bl	80029b0 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 fa8d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000094 	.word	0x20000094
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <MX_GPIO_Init+0x130>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a44      	ldr	r2, [pc, #272]	; (800090c <MX_GPIO_Init+0x130>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <MX_GPIO_Init+0x130>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b3e      	ldr	r3, [pc, #248]	; (800090c <MX_GPIO_Init+0x130>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3d      	ldr	r2, [pc, #244]	; (800090c <MX_GPIO_Init+0x130>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <MX_GPIO_Init+0x130>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b37      	ldr	r3, [pc, #220]	; (800090c <MX_GPIO_Init+0x130>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a36      	ldr	r2, [pc, #216]	; (800090c <MX_GPIO_Init+0x130>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_GPIO_Init+0x130>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <MX_GPIO_Init+0x130>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <MX_GPIO_Init+0x130>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0x130>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2103      	movs	r1, #3
 8000866:	482a      	ldr	r0, [pc, #168]	; (8000910 <MX_GPIO_Init+0x134>)
 8000868:	f000 ff9c 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2120      	movs	r1, #32
 8000870:	4828      	ldr	r0, [pc, #160]	; (8000914 <MX_GPIO_Init+0x138>)
 8000872:	f000 ff97 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4820      	ldr	r0, [pc, #128]	; (8000910 <MX_GPIO_Init+0x134>)
 800088e:	f000 fddd 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000892:	2303      	movs	r3, #3
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4819      	ldr	r0, [pc, #100]	; (8000910 <MX_GPIO_Init+0x134>)
 80008aa:	f000 fdcf 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ae:	2320      	movs	r3, #32
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_GPIO_Init+0x138>)
 80008c6:	f000 fdc1 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0x138>)
 80008e0:	f000 fdb4 	bl	800144c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2017      	movs	r0, #23
 80008ea:	f000 fcf3 	bl	80012d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ee:	2017      	movs	r0, #23
 80008f0:	f000 fd0c 	bl	800130c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2105      	movs	r1, #5
 80008f8:	2028      	movs	r0, #40	; 0x28
 80008fa:	f000 fceb 	bl	80012d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f000 fd04 	bl	800130c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020800 	.word	0x40020800
 8000914:	40020000 	.word	0x40020000

08000918 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
    if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d00a      	beq.n	8000940 <_write+0x28>
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d007      	beq.n	8000940 <_write+0x28>
        errno = EBADF;
 8000930:	f005 ffd4 	bl	80068dc <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	2209      	movs	r2, #9
 8000938:	601a      	str	r2, [r3, #0]
        return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e00f      	b.n	8000960 <_write+0x48>
    }

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	b29a      	uxth	r2, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <_write+0x50>)
 800094c:	f002 f87d 	bl	8002a4a <HAL_UART_Transmit>
 8000950:	4603      	mov	r3, r0
 8000952:	75fb      	strb	r3, [r7, #23]

    // return # of bytes written or error
    return (status == HAL_OK ? len : EIO);
 8000954:	7dfb      	ldrb	r3, [r7, #23]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <_write+0x46>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	e000      	b.n	8000960 <_write+0x48>
 800095e:	2305      	movs	r3, #5
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000094 	.word	0x20000094

0800096c <Task1_Temp>:
  * @brief  Function implementing the Task1 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Temp */
void Task1_Temp(void *argument) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint32_t button_press_time = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
	uint32_t button_release_time = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
	bool button_pressed = false;
 800097c:	2300      	movs	r3, #0
 800097e:	76fb      	strb	r3, [r7, #27]
	MorseSignal signal;

	// Init console.
	fflush(stdout);
 8000980:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <Task1_Temp+0xe8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4618      	mov	r0, r3
 8000988:	f006 f870 	bl	8006a6c <fflush>
	printf("\033[2K\033[1G"); // Clear line
 800098c:	4832      	ldr	r0, [pc, #200]	; (8000a58 <Task1_Temp+0xec>)
 800098e:	f006 fa93 	bl	8006eb8 <iprintf>
	printf("\033[1A"); // Move the cursor up 1 line
 8000992:	4832      	ldr	r0, [pc, #200]	; (8000a5c <Task1_Temp+0xf0>)
 8000994:	f006 fa90 	bl	8006eb8 <iprintf>
	printf("\033[2K\033[1G"); // Clear line
 8000998:	482f      	ldr	r0, [pc, #188]	; (8000a58 <Task1_Temp+0xec>)
 800099a:	f006 fa8d 	bl	8006eb8 <iprintf>
	printf("Button Tick: %lu\r\n", 0);
 800099e:	2100      	movs	r1, #0
 80009a0:	482f      	ldr	r0, [pc, #188]	; (8000a60 <Task1_Temp+0xf4>)
 80009a2:	f006 fa89 	bl	8006eb8 <iprintf>

	for (;;) {
		if(button_pressed) {
 80009a6:	7efb      	ldrb	r3, [r7, #27]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d011      	beq.n	80009d0 <Task1_Temp+0x64>
			fflush(stdout);
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <Task1_Temp+0xe8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f006 f85a 	bl	8006a6c <fflush>
			printf("\033[1A"); // Move the cursor up 1 line
 80009b8:	4828      	ldr	r0, [pc, #160]	; (8000a5c <Task1_Temp+0xf0>)
 80009ba:	f006 fa7d 	bl	8006eb8 <iprintf>
			printf("Button Tick: %lu\r\n", HAL_GetTick()-button_press_time);
 80009be:	f000 fbc5 	bl	800114c <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	4825      	ldr	r0, [pc, #148]	; (8000a60 <Task1_Temp+0xf4>)
 80009cc:	f006 fa74 	bl	8006eb8 <iprintf>
		}

		// Check if the button is pressed
		if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_SET && !button_pressed) {
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	4824      	ldr	r0, [pc, #144]	; (8000a64 <Task1_Temp+0xf8>)
 80009d4:	f000 fece 	bl	8001774 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d114      	bne.n	8000a08 <Task1_Temp+0x9c>
 80009de:	7efb      	ldrb	r3, [r7, #27]
 80009e0:	f083 0301 	eor.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00e      	beq.n	8000a08 <Task1_Temp+0x9c>
			button_pressed = true;
 80009ea:	2301      	movs	r3, #1
 80009ec:	76fb      	strb	r3, [r7, #27]
			button_press_time = HAL_GetTick();
 80009ee:	f000 fbad 	bl	800114c <HAL_GetTick>
 80009f2:	61f8      	str	r0, [r7, #28]

			printf("\033[1A"); // Move the cursor up 1 line
 80009f4:	4819      	ldr	r0, [pc, #100]	; (8000a5c <Task1_Temp+0xf0>)
 80009f6:	f006 fa5f 	bl	8006eb8 <iprintf>
			printf("\033[2K\033[1G"); // Clear line
 80009fa:	4817      	ldr	r0, [pc, #92]	; (8000a58 <Task1_Temp+0xec>)
 80009fc:	f006 fa5c 	bl	8006eb8 <iprintf>
			printf("Button Tick: 0\r\n");
 8000a00:	4819      	ldr	r0, [pc, #100]	; (8000a68 <Task1_Temp+0xfc>)
 8000a02:	f006 faf5 	bl	8006ff0 <puts>
 8000a06:	e023      	b.n	8000a50 <Task1_Temp+0xe4>

		} else if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == GPIO_PIN_RESET && button_pressed) {
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4816      	ldr	r0, [pc, #88]	; (8000a64 <Task1_Temp+0xf8>)
 8000a0c:	f000 feb2 	bl	8001774 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1c7      	bne.n	80009a6 <Task1_Temp+0x3a>
 8000a16:	7efb      	ldrb	r3, [r7, #27]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0c4      	beq.n	80009a6 <Task1_Temp+0x3a>
			button_pressed = false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	76fb      	strb	r3, [r7, #27]
			button_release_time = HAL_GetTick();
 8000a20:	f000 fb94 	bl	800114c <HAL_GetTick>
 8000a24:	6178      	str	r0, [r7, #20]

			uint32_t press_duration = button_release_time - button_press_time;
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	613b      	str	r3, [r7, #16]
			if (press_duration < DOT_THRESHOLD) {
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a34:	d202      	bcs.n	8000a3c <Task1_Temp+0xd0>
				signal = SIGNAL_DOT;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e001      	b.n	8000a40 <Task1_Temp+0xd4>
			} else {
				signal = SIGNAL_DASH;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	73fb      	strb	r3, [r7, #15]
			}

			// Enqueue the Morse code signal (dot or dash) to Queue1
			osMessageQueuePut(Queue1Handle, &signal, 0, 0);
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <Task1_Temp+0x100>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f107 010f 	add.w	r1, r7, #15
 8000a48:	2300      	movs	r3, #0
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f003 f972 	bl	8003d34 <osMessageQueuePut>
		if(button_pressed) {
 8000a50:	e7a9      	b.n	80009a6 <Task1_Temp+0x3a>
 8000a52:	bf00      	nop
 8000a54:	20000014 	.word	0x20000014
 8000a58:	08007b88 	.word	0x08007b88
 8000a5c:	08007b94 	.word	0x08007b94
 8000a60:	08007b9c 	.word	0x08007b9c
 8000a64:	40020000 	.word	0x40020000
 8000a68:	08007bb0 	.word	0x08007bb0
 8000a6c:	200000e8 	.word	0x200000e8

08000a70 <Task2_Temp>:
* @brief Function implementing the Task2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Temp */
void Task2_Temp(void *argument) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	// Init vars.
	MorseSignal signal;
	osStatus_t status;
	uint32_t led_on_time = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
	bool led_on = false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]

	for (;;) {
		// Dequeue a Morse code signal (dot or dash) from Queue1
		status = osMessageQueueGet(Queue1Handle, &signal, NULL, 0);
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <Task2_Temp+0xb0>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f107 010b 	add.w	r1, r7, #11
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f003 f9b2 	bl	8003df4 <osMessageQueueGet>
 8000a90:	60f8      	str	r0, [r7, #12]
		if (status == osOK) { // Dash or Dot in Queue.
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11a      	bne.n	8000ace <Task2_Temp+0x5e>
			// Turn on the LED
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4821      	ldr	r0, [pc, #132]	; (8000b24 <Task2_Temp+0xb4>)
 8000a9e:	f000 fe81 	bl	80017a4 <HAL_GPIO_WritePin>
			led_on = true;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	74fb      	strb	r3, [r7, #19]
			led_on_time = HAL_GetTick();
 8000aa6:	f000 fb51 	bl	800114c <HAL_GetTick>
 8000aaa:	6178      	str	r0, [r7, #20]

			// Enqueue the signal to Queue2_1 and Queue2_2
			osMessageQueuePut(Queue2_1Handle, &signal, 0, 0);
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <Task2_Temp+0xb8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	f107 010b 	add.w	r1, r7, #11
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f003 f93c 	bl	8003d34 <osMessageQueuePut>
			osMessageQueuePut(Queue2_2Handle, &signal, 0, 0);
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <Task2_Temp+0xbc>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	f107 010b 	add.w	r1, r7, #11
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f003 f934 	bl	8003d34 <osMessageQueuePut>
 8000acc:	e7d8      	b.n	8000a80 <Task2_Temp+0x10>

		} else { // Dash or Dot in Queue.
			if(led_on) {
 8000ace:	7cfb      	ldrb	r3, [r7, #19]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0d5      	beq.n	8000a80 <Task2_Temp+0x10>
				if (signal == SIGNAL_DOT) {
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10f      	bne.n	8000afa <Task2_Temp+0x8a>
					if(led_on_time+DOT_THRESHOLD <= HAL_GetTick()) {
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8000ae0:	f000 fb34 	bl	800114c <HAL_GetTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	d8ca      	bhi.n	8000a80 <Task2_Temp+0x10>
						// Turn off the LED
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <Task2_Temp+0xb4>)
 8000af0:	f000 fe58 	bl	80017a4 <HAL_GPIO_WritePin>
						led_on = false;
 8000af4:	2300      	movs	r3, #0
 8000af6:	74fb      	strb	r3, [r7, #19]
 8000af8:	e7c2      	b.n	8000a80 <Task2_Temp+0x10>
					}
				} else if (signal == SIGNAL_DASH) {
 8000afa:	7afb      	ldrb	r3, [r7, #11]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d1bf      	bne.n	8000a80 <Task2_Temp+0x10>
					if(led_on_time+DASH_THRESHOLD <= HAL_GetTick()) {
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 8000b06:	f000 fb21 	bl	800114c <HAL_GetTick>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	429c      	cmp	r4, r3
 8000b0e:	d8b7      	bhi.n	8000a80 <Task2_Temp+0x10>
						// Turn off the LED
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2101      	movs	r1, #1
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <Task2_Temp+0xb4>)
 8000b16:	f000 fe45 	bl	80017a4 <HAL_GPIO_WritePin>
						led_on = false;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	74fb      	strb	r3, [r7, #19]
		status = osMessageQueueGet(Queue1Handle, &signal, NULL, 0);
 8000b1e:	e7af      	b.n	8000a80 <Task2_Temp+0x10>
 8000b20:	200000e8 	.word	0x200000e8
 8000b24:	40020800 	.word	0x40020800
 8000b28:	200000ec 	.word	0x200000ec
 8000b2c:	200000f0 	.word	0x200000f0

08000b30 <Task3_Temp>:
* @brief Function implementing the Task3 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_Temp */
void Task3_Temp(void *argument) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	MorseSignal signal;
	osStatus_t status;

	// Buffer to store the Morse code sequence
	char morse_buffer[8] = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
	uint8_t buffer_index = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t last_signal_time = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
	bool word_space = false;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	static int letter_count = 1;

	for (;;) {
		// Dequeue a Morse code signal (dot or dash) from Queue2_1
		status = osMessageQueueGet(Queue2_1Handle, &signal, NULL, 0);
 8000b50:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <Task3_Temp+0x170>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	f107 0117 	add.w	r1, r7, #23
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f003 f94a 	bl	8003df4 <osMessageQueueGet>
 8000b60:	61f8      	str	r0, [r7, #28]
		if (status == osOK) { // Got Dash or Dot
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d121      	bne.n	8000bac <Task3_Temp+0x7c>
			last_signal_time = HAL_GetTick();
 8000b68:	f000 faf0 	bl	800114c <HAL_GetTick>
 8000b6c:	62b8      	str	r0, [r7, #40]	; 0x28
			word_space = false;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			// Add the signal to the buffer
			if (signal == SIGNAL_DOT) {
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10a      	bne.n	8000b90 <Task3_Temp+0x60>
				morse_buffer[buffer_index++] = '.';
 8000b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000b84:	3330      	adds	r3, #48	; 0x30
 8000b86:	443b      	add	r3, r7
 8000b88:	222e      	movs	r2, #46	; 0x2e
 8000b8a:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000b8e:	e7df      	b.n	8000b50 <Task3_Temp+0x20>
			} else if (signal == SIGNAL_DASH) {
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d1dc      	bne.n	8000b50 <Task3_Temp+0x20>
				morse_buffer[buffer_index++] = '-';
 8000b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000ba0:	3330      	adds	r3, #48	; 0x30
 8000ba2:	443b      	add	r3, r7
 8000ba4:	222d      	movs	r2, #45	; 0x2d
 8000ba6:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000baa:	e7d1      	b.n	8000b50 <Task3_Temp+0x20>
			}

		} else { // Did not get Dash or Dot.
			uint32_t current_time = HAL_GetTick();
 8000bac:	f000 face 	bl	800114c <HAL_GetTick>
 8000bb0:	61b8      	str	r0, [r7, #24]
			if (current_time - last_signal_time >= GAP_WORD && last_signal_time != 0) {
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d921      	bls.n	8000c04 <Task3_Temp+0xd4>
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d01e      	beq.n	8000c04 <Task3_Temp+0xd4>
				// Handle word space
				if(word_space == false) {
 8000bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bca:	f083 0301 	eor.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d064      	beq.n	8000c9e <Task3_Temp+0x16e>
					printf("\033[%dG", letter_count);
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <Task3_Temp+0x174>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <Task3_Temp+0x178>)
 8000bdc:	f006 f96c 	bl	8006eb8 <iprintf>
					printf(" ");
 8000be0:	2020      	movs	r0, #32
 8000be2:	f006 f981 	bl	8006ee8 <putchar>
					fflush(stdout);
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <Task3_Temp+0x17c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 ff3d 	bl	8006a6c <fflush>
					word_space = true;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					letter_count++;
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <Task3_Temp+0x174>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <Task3_Temp+0x174>)
 8000c00:	6013      	str	r3, [r2, #0]
				if(word_space == false) {
 8000c02:	e04c      	b.n	8000c9e <Task3_Temp+0x16e>
				}
			} else if (current_time - last_signal_time >= GAP_LETTER && last_signal_time != 0) {
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c0e:	d39f      	bcc.n	8000b50 <Task3_Temp+0x20>
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d09c      	beq.n	8000b50 <Task3_Temp+0x20>
				// Make sure the buffer is null-terminated
				morse_buffer[buffer_index] = '\0';
 8000c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c1a:	3330      	adds	r3, #48	; 0x30
 8000c1c:	443b      	add	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f803 2c24 	strb.w	r2, [r3, #-36]

				// Decode the Morse code and print the corresponding letter
				for (int i = 0; morseLookupTable[i].morse != NULL; ++i) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	e029      	b.n	8000c7e <Task3_Temp+0x14e>
					if (strcmp(morse_buffer, morseLookupTable[i].morse) == 0) {
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <Task3_Temp+0x180>)
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fae9 	bl	8000210 <strcmp>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d119      	bne.n	8000c78 <Task3_Temp+0x148>
						printf("\033[%dG", letter_count);
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <Task3_Temp+0x174>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <Task3_Temp+0x178>)
 8000c4c:	f006 f934 	bl	8006eb8 <iprintf>
						printf("%c", morseLookupTable[i].character);
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <Task3_Temp+0x180>)
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	791b      	ldrb	r3, [r3, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f006 f944 	bl	8006ee8 <putchar>
						letter_count++;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <Task3_Temp+0x174>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <Task3_Temp+0x174>)
 8000c68:	6013      	str	r3, [r2, #0]
						fflush(stdout);
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <Task3_Temp+0x17c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fefb 	bl	8006a6c <fflush>
						break;
 8000c76:	e008      	b.n	8000c8a <Task3_Temp+0x15a>
				for (int i = 0; morseLookupTable[i].morse != NULL; ++i) {
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <Task3_Temp+0x180>)
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1cf      	bne.n	8000c2a <Task3_Temp+0xfa>
					}
				}
				buffer_index = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memset(morse_buffer, 0, sizeof(morse_buffer));
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2208      	movs	r2, #8
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f006 f824 	bl	8006ce6 <memset>
		status = osMessageQueueGet(Queue2_1Handle, &signal, NULL, 0);
 8000c9e:	e757      	b.n	8000b50 <Task3_Temp+0x20>
 8000ca0:	200000ec 	.word	0x200000ec
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	08007bc0 	.word	0x08007bc0
 8000cac:	20000014 	.word	0x20000014
 8000cb0:	08007cb8 	.word	0x08007cb8

08000cb4 <Task4_Temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task4_Temp */
void Task4_Temp(void *argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task4_Temp */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f002 ffab 	bl	8003c18 <osDelay>
 8000cc2:	e7fb      	b.n	8000cbc <Task4_Temp+0x8>

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 fa25 	bl	8001124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40001000 	.word	0x40001000

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_MspInit+0x54>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_MspInit+0x54>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x54>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_MspInit+0x54>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_MspInit+0x54>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_MspInit+0x54>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	210f      	movs	r1, #15
 8000d36:	f06f 0001 	mvn.w	r0, #1
 8000d3a:	f000 facb 	bl	80012d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0x94>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d133      	bne.n	8000dd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_UART_MspInit+0x98>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0x98>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x98>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x98>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0x98>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_UART_MspInit+0x98>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da6:	230c      	movs	r3, #12
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db6:	2307      	movs	r3, #7
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_UART_MspInit+0x9c>)
 8000dc2:	f000 fb43 	bl	800144c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f000 fa82 	bl	80012d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dd0:	2026      	movs	r0, #38	; 0x26
 8000dd2:	f000 fa9b 	bl	800130c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <HAL_InitTick+0xe4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <HAL_InitTick+0xe4>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <HAL_InitTick+0xe4>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e18:	f107 0210 	add.w	r2, r7, #16
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fe16 	bl	8001a54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d103      	bne.n	8000e3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e32:	f000 fde7 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8000e36:	6378      	str	r0, [r7, #52]	; 0x34
 8000e38:	e004      	b.n	8000e44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e3a:	f000 fde3 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <HAL_InitTick+0xe8>)
 8000e48:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4c:	0c9b      	lsrs	r3, r3, #18
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <HAL_InitTick+0xf0>)
 8000e56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e78:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e7a:	f001 faeb 	bl	8002454 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d11b      	bne.n	8000ec4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <HAL_InitTick+0xec>)
 8000e8e:	f001 fb3b 	bl	8002508 <HAL_TIM_Base_Start_IT>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d111      	bne.n	8000ec4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ea0:	2036      	movs	r0, #54	; 0x36
 8000ea2:	f000 fa33 	bl	800130c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d808      	bhi.n	8000ebe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	2036      	movs	r0, #54	; 0x36
 8000eb2:	f000 fa0f 	bl	80012d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_InitTick+0xf4>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e002      	b.n	8000ec4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3738      	adds	r7, #56	; 0x38
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	431bde83 	.word	0x431bde83
 8000ed8:	200000f4 	.word	0x200000f4
 8000edc:	40001000 	.word	0x40001000
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8000f14:	2040      	movs	r0, #64	; 0x40
 8000f16:	f000 fc5f 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART2_IRQHandler+0x10>)
 8000f26:	f001 fe23 	bl	8002b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000094 	.word	0x20000094

08000f34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f3c:	f000 fc4c 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM6_DAC_IRQHandler+0x10>)
 8000f4a:	f001 fb4d 	bl	80025e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000f4 	.word	0x200000f4

08000f58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00a      	b.n	8000f80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f6a:	f3af 8000 	nop.w
 8000f6e:	4601      	mov	r1, r0
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	60ba      	str	r2, [r7, #8]
 8000f76:	b2ca      	uxtb	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf0      	blt.n	8000f6a <_read+0x12>
  }

  return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	605a      	str	r2, [r3, #4]
  return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_isatty>:

int _isatty(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f005 fc56 	bl	80068dc <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20020000 	.word	0x20020000
 800105c:	00000400 	.word	0x00000400
 8001060:	2000013c 	.word	0x2000013c
 8001064:	20004aa8 	.word	0x20004aa8

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001092:	490e      	ldr	r1, [pc, #56]	; (80010cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a8:	4c0b      	ldr	r4, [pc, #44]	; (80010d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b6:	f7ff ffd7 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f005 fddf 	bl	8006c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa89 	bl	80005d4 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80010d0:	08007e98 	.word	0x08007e98
  ldr r2, =_sbss
 80010d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80010d8:	20004aa4 	.word	0x20004aa4

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_Init+0x40>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_Init+0x40>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x40>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f8d8 	bl	80012be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f7ff fe6c 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fdee 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000140 	.word	0x20000140

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000140 	.word	0x20000140

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff4c 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e6:	f7ff ff61 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	6978      	ldr	r0, [r7, #20]
 80012f2:	f7ff ffb1 	bl	8001258 <NVIC_EncodePriority>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff80 	bl	8001204 <__NVIC_SetPriority>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff54 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001336:	f7ff ff09 	bl	800114c <HAL_GetTick>
 800133a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d008      	beq.n	800135a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e052      	b.n	8001400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0216 	bic.w	r2, r2, #22
 8001368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_DMA_Abort+0x62>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0208 	bic.w	r2, r2, #8
 8001398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013aa:	e013      	b.n	80013d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ac:	f7ff fece 	bl	800114c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d90c      	bls.n	80013d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2220      	movs	r2, #32
 80013be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e015      	b.n	8001400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1e4      	bne.n	80013ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	223f      	movs	r2, #63	; 0x3f
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d004      	beq.n	8001426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00c      	b.n	8001440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2205      	movs	r2, #5
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e165      	b.n	8001734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8154 	bne.w	800172e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d005      	beq.n	800149e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	2b02      	cmp	r3, #2
 800149c:	d130      	bne.n	8001500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b03      	cmp	r3, #3
 800150a:	d017      	beq.n	800153c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80ae 	beq.w	800172e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b5d      	ldr	r3, [pc, #372]	; (800174c <HAL_GPIO_Init+0x300>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a5c      	ldr	r2, [pc, #368]	; (800174c <HAL_GPIO_Init+0x300>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <HAL_GPIO_Init+0x300>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_GPIO_Init+0x304>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <HAL_GPIO_Init+0x308>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d025      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_GPIO_Init+0x30c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01f      	beq.n	8001662 <HAL_GPIO_Init+0x216>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4d      	ldr	r2, [pc, #308]	; (800175c <HAL_GPIO_Init+0x310>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x212>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_GPIO_Init+0x314>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x20e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4b      	ldr	r2, [pc, #300]	; (8001764 <HAL_GPIO_Init+0x318>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x20a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4a      	ldr	r2, [pc, #296]	; (8001768 <HAL_GPIO_Init+0x31c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x206>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a49      	ldr	r2, [pc, #292]	; (800176c <HAL_GPIO_Init+0x320>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x202>
 800164a:	2306      	movs	r3, #6
 800164c:	e00c      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 800164e:	2307      	movs	r3, #7
 8001650:	e00a      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001652:	2305      	movs	r3, #5
 8001654:	e008      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001656:	2304      	movs	r3, #4
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 800165a:	2303      	movs	r3, #3
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001666:	2300      	movs	r3, #0
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4093      	lsls	r3, r2
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001678:	4935      	ldr	r1, [pc, #212]	; (8001750 <HAL_GPIO_Init+0x304>)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001686:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_GPIO_Init+0x324>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	f67f ae96 	bls.w	8001468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40013800 	.word	0x40013800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020800 	.word	0x40020800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40021000 	.word	0x40021000
 8001768:	40021400 	.word	0x40021400
 800176c:	40021800 	.word	0x40021800
 8001770:	40013c00 	.word	0x40013c00

08001774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f806 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40013c00 	.word	0x40013c00

08001808 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0cc      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d90c      	bls.n	800185c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0b8      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	494d      	ldr	r1, [pc, #308]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d044      	beq.n	8001940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e07f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e06f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e067      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4934      	ldr	r1, [pc, #208]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff fc1c 	bl	800114c <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff fc18 	bl	800114c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d20c      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e032      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4916      	ldr	r1, [pc, #88]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a6:	f000 f887 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	490a      	ldr	r1, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	5ccb      	ldrb	r3, [r1, r3]
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fa10 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	08007dd8 	.word	0x08007dd8
 80019e4:	20000004 	.word	0x20000004
 80019e8:	20000008 	.word	0x20000008

080019ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a08:	f7ff fff0 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0a9b      	lsrs	r3, r3, #10
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08007de8 	.word	0x08007de8

08001a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a30:	f7ff ffdc 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0b5b      	lsrs	r3, r3, #13
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08007de8 	.word	0x08007de8

08001a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220f      	movs	r2, #15
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_RCC_GetClockConfig+0x60>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 020f 	and.w	r2, r3, #15
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001abc:	b0ae      	sub	sp, #184	; 0xb8
 8001abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ade:	4bcb      	ldr	r3, [pc, #812]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	f200 8206 	bhi.w	8001ef8 <HAL_RCC_GetSysClockFreq+0x440>
 8001aec:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af2:	bf00      	nop
 8001af4:	08001b29 	.word	0x08001b29
 8001af8:	08001ef9 	.word	0x08001ef9
 8001afc:	08001ef9 	.word	0x08001ef9
 8001b00:	08001ef9 	.word	0x08001ef9
 8001b04:	08001b31 	.word	0x08001b31
 8001b08:	08001ef9 	.word	0x08001ef9
 8001b0c:	08001ef9 	.word	0x08001ef9
 8001b10:	08001ef9 	.word	0x08001ef9
 8001b14:	08001b39 	.word	0x08001b39
 8001b18:	08001ef9 	.word	0x08001ef9
 8001b1c:	08001ef9 	.word	0x08001ef9
 8001b20:	08001ef9 	.word	0x08001ef9
 8001b24:	08001d29 	.word	0x08001d29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4bb9      	ldr	r3, [pc, #740]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b2e:	e1e7      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b30:	4bb8      	ldr	r3, [pc, #736]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b36:	e1e3      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b38:	4bb4      	ldr	r3, [pc, #720]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b44:	4bb1      	ldr	r3, [pc, #708]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d071      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b50:	4bae      	ldr	r3, [pc, #696]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	2200      	movs	r2, #0
 8001b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b76:	4622      	mov	r2, r4
 8001b78:	462b      	mov	r3, r5
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	0159      	lsls	r1, r3, #5
 8001b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b88:	0150      	lsls	r0, r2, #5
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4621      	mov	r1, r4
 8001b90:	1a51      	subs	r1, r2, r1
 8001b92:	6439      	str	r1, [r7, #64]	; 0x40
 8001b94:	4629      	mov	r1, r5
 8001b96:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ba8:	4649      	mov	r1, r9
 8001baa:	018b      	lsls	r3, r1, #6
 8001bac:	4641      	mov	r1, r8
 8001bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb2:	4641      	mov	r1, r8
 8001bb4:	018a      	lsls	r2, r1, #6
 8001bb6:	4641      	mov	r1, r8
 8001bb8:	1a51      	subs	r1, r2, r1
 8001bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	00cb      	lsls	r3, r1, #3
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bda:	4641      	mov	r1, r8
 8001bdc:	00ca      	lsls	r2, r1, #3
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	4622      	mov	r2, r4
 8001be6:	189b      	adds	r3, r3, r2
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bea:	462b      	mov	r3, r5
 8001bec:	460a      	mov	r2, r1
 8001bee:	eb42 0303 	adc.w	r3, r2, r3
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c00:	4629      	mov	r1, r5
 8001c02:	024b      	lsls	r3, r1, #9
 8001c04:	4621      	mov	r1, r4
 8001c06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	024a      	lsls	r2, r1, #9
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c16:	2200      	movs	r2, #0
 8001c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c24:	f7fe fb54 	bl	80002d0 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c32:	e067      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c34:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c4e:	2300      	movs	r3, #0
 8001c50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	f04f 0000 	mov.w	r0, #0
 8001c5e:	f04f 0100 	mov.w	r1, #0
 8001c62:	0159      	lsls	r1, r3, #5
 8001c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c68:	0150      	lsls	r0, r2, #5
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4621      	mov	r1, r4
 8001c70:	1a51      	subs	r1, r2, r1
 8001c72:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c74:	4629      	mov	r1, r5
 8001c76:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001c88:	4649      	mov	r1, r9
 8001c8a:	018b      	lsls	r3, r1, #6
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c92:	4641      	mov	r1, r8
 8001c94:	018a      	lsls	r2, r1, #6
 8001c96:	4641      	mov	r1, r8
 8001c98:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cb6:	4692      	mov	sl, r2
 8001cb8:	469b      	mov	fp, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	eb1a 0303 	adds.w	r3, sl, r3
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	028b      	lsls	r3, r1, #10
 8001cda:	4621      	mov	r1, r4
 8001cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	028a      	lsls	r2, r1, #10
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cec:	2200      	movs	r2, #0
 8001cee:	673b      	str	r3, [r7, #112]	; 0x70
 8001cf0:	677a      	str	r2, [r7, #116]	; 0x74
 8001cf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001cf6:	f7fe faeb 	bl	80002d0 <__aeabi_uldivmod>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4613      	mov	r3, r2
 8001d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d04:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d26:	e0eb      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d06b      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	2200      	movs	r2, #0
 8001d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d52:	663b      	str	r3, [r7, #96]	; 0x60
 8001d54:	2300      	movs	r3, #0
 8001d56:	667b      	str	r3, [r7, #100]	; 0x64
 8001d58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	462b      	mov	r3, r5
 8001d60:	f04f 0000 	mov.w	r0, #0
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	0159      	lsls	r1, r3, #5
 8001d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6e:	0150      	lsls	r0, r2, #5
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4621      	mov	r1, r4
 8001d76:	1a51      	subs	r1, r2, r1
 8001d78:	61b9      	str	r1, [r7, #24]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d8e:	4659      	mov	r1, fp
 8001d90:	018b      	lsls	r3, r1, #6
 8001d92:	4651      	mov	r1, sl
 8001d94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d98:	4651      	mov	r1, sl
 8001d9a:	018a      	lsls	r2, r1, #6
 8001d9c:	4651      	mov	r1, sl
 8001d9e:	ebb2 0801 	subs.w	r8, r2, r1
 8001da2:	4659      	mov	r1, fp
 8001da4:	eb63 0901 	sbc.w	r9, r3, r1
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dbc:	4690      	mov	r8, r2
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	eb18 0303 	adds.w	r3, r8, r3
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	462b      	mov	r3, r5
 8001dca:	eb49 0303 	adc.w	r3, r9, r3
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ddc:	4629      	mov	r1, r5
 8001dde:	024b      	lsls	r3, r1, #9
 8001de0:	4621      	mov	r1, r4
 8001de2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001de6:	4621      	mov	r1, r4
 8001de8:	024a      	lsls	r2, r1, #9
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df2:	2200      	movs	r2, #0
 8001df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001df6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dfc:	f7fe fa68 	bl	80002d0 <__aeabi_uldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4613      	mov	r3, r2
 8001e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e0a:	e065      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x420>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	4611      	mov	r1, r2
 8001e24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e28:	653b      	str	r3, [r7, #80]	; 0x50
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e32:	4642      	mov	r2, r8
 8001e34:	464b      	mov	r3, r9
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	4649      	mov	r1, r9
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e64:	4659      	mov	r1, fp
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4651      	mov	r1, sl
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4651      	mov	r1, sl
 8001e74:	1a54      	subs	r4, r2, r1
 8001e76:	4659      	mov	r1, fp
 8001e78:	eb63 0501 	sbc.w	r5, r3, r1
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	00eb      	lsls	r3, r5, #3
 8001e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e8a:	00e2      	lsls	r2, r4, #3
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	461d      	mov	r5, r3
 8001e90:	4643      	mov	r3, r8
 8001e92:	18e3      	adds	r3, r4, r3
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	464b      	mov	r3, r9
 8001e98:	eb45 0303 	adc.w	r3, r5, r3
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eaa:	4629      	mov	r1, r5
 8001eac:	028b      	lsls	r3, r1, #10
 8001eae:	4621      	mov	r1, r4
 8001eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	028a      	lsls	r2, r1, #10
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ec4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ec6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001eca:	f7fe fa01 	bl	80002d0 <__aeabi_uldivmod>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0f1b      	lsrs	r3, r3, #28
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ef6:	e003      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	37b8      	adds	r7, #184	; 0xb8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400

08001f18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e28d      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8083 	beq.w	800203e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f38:	4b94      	ldr	r3, [pc, #592]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d019      	beq.n	8001f78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f44:	4b91      	ldr	r3, [pc, #580]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f50:	4b8e      	ldr	r3, [pc, #568]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5c:	d00c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5e:	4b8b      	ldr	r3, [pc, #556]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d112      	bne.n	8001f90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6a:	4b88      	ldr	r3, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f76:	d10b      	bne.n	8001f90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	4b84      	ldr	r3, [pc, #528]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d05b      	beq.n	800203c <HAL_RCC_OscConfig+0x124>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d157      	bne.n	800203c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e25a      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x90>
 8001f9a:	4b7c      	ldr	r3, [pc, #496]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7b      	ldr	r2, [pc, #492]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e01d      	b.n	8001fe4 <HAL_RCC_OscConfig+0xcc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0xb4>
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a75      	ldr	r2, [pc, #468]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b73      	ldr	r3, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a72      	ldr	r2, [pc, #456]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0xcc>
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a6b      	ldr	r2, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8001fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff f8ae 	bl	800114c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f8aa 	bl	800114c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e21f      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b61      	ldr	r3, [pc, #388]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xdc>
 8002012:	e014      	b.n	800203e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff f89a 	bl	800114c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff f896 	bl	800114c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e20b      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x104>
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06f      	beq.n	800212a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800204a:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_OscConfig+0x274>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b00      	cmp	r3, #0
 8002054:	d017      	beq.n	8002086 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002056:	4b4d      	ldr	r3, [pc, #308]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800205e:	2b08      	cmp	r3, #8
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002062:	4b4a      	ldr	r3, [pc, #296]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b44      	ldr	r3, [pc, #272]	; (800218c <HAL_RCC_OscConfig+0x274>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x186>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1d3      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_OscConfig+0x274>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4937      	ldr	r1, [pc, #220]	; (800218c <HAL_RCC_OscConfig+0x274>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_RCC_OscConfig+0x278>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff f843 	bl	800114c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff f83f 	bl	800114c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1b4      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_OscConfig+0x274>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCC_OscConfig+0x274>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4925      	ldr	r1, [pc, #148]	; (800218c <HAL_RCC_OscConfig+0x274>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCC_OscConfig+0x278>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f822 	bl	800114c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff f81e 	bl	800114c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e193      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d036      	beq.n	80021a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_RCC_OscConfig+0x27c>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff f802 	bl	800114c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214c:	f7fe fffe 	bl	800114c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e173      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x234>
 800216a:	e01b      	b.n	80021a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_OscConfig+0x27c>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe ffeb 	bl	800114c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	e00e      	b.n	8002198 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217a:	f7fe ffe7 	bl	800114c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d907      	bls.n	8002198 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e15c      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
 800218c:	40023800 	.word	0x40023800
 8002190:	42470000 	.word	0x42470000
 8002194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b8a      	ldr	r3, [pc, #552]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ea      	bne.n	800217a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8097 	beq.w	80022e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b83      	ldr	r3, [pc, #524]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b7f      	ldr	r3, [pc, #508]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a7e      	ldr	r2, [pc, #504]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4b79      	ldr	r3, [pc, #484]	; (80023c8 <HAL_RCC_OscConfig+0x4b0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d118      	bne.n	8002220 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x4b0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x4b0>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fa:	f7fe ffa7 	bl	800114c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002202:	f7fe ffa3 	bl	800114c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e118      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x4b0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x31e>
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	e01c      	b.n	8002270 <HAL_RCC_OscConfig+0x358>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x340>
 800223e:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a5d      	ldr	r2, [pc, #372]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0x358>
 8002258:	4b5a      	ldr	r3, [pc, #360]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a59      	ldr	r2, [pc, #356]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a56      	ldr	r2, [pc, #344]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7fe ff68 	bl	800114c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7fe ff64 	bl	800114c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0d7      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0ee      	beq.n	8002280 <HAL_RCC_OscConfig+0x368>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe ff52 	bl	800114c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe ff4e 	bl	800114c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0c1      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c2:	4b40      	ldr	r3, [pc, #256]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ee      	bne.n	80022ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80ad 	beq.w	8002444 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ea:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d060      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d145      	bne.n	800238a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b33      	ldr	r3, [pc, #204]	; (80023cc <HAL_RCC_OscConfig+0x4b4>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe ff22 	bl	800114c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe ff1e 	bl	800114c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e093      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	3b01      	subs	r3, #1
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	071b      	lsls	r3, r3, #28
 8002356:	491b      	ldr	r1, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x4b4>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fef3 	bl	800114c <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe feef 	bl	800114c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e064      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x452>
 8002388:	e05c      	b.n	8002444 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x4b4>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fedc 	bl	800114c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fed8 	bl	800114c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e04d      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x4ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x480>
 80023b6:	e045      	b.n	8002444 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e040      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <HAL_RCC_OscConfig+0x538>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d030      	beq.n	8002440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d129      	bne.n	8002440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d122      	bne.n	8002440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d119      	bne.n	8002440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d10f      	bne.n	8002440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e041      	b.n	80024ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f839 	bl	80024f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f000 f9d8 	bl	8002848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04e      	b.n	80025be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_TIM_Base_Start_IT+0xc4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d022      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254a:	d01d      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d018      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x80>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d111      	bne.n	80025ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d010      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025aa:	e007      	b.n	80025bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40010400 	.word	0x40010400
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40001800 	.word	0x40001800

080025e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d122      	bne.n	8002644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b02      	cmp	r3, #2
 800260a:	d11b      	bne.n	8002644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0202 	mvn.w	r2, #2
 8002614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8ee 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8e0 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f8f1 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d122      	bne.n	8002698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b04      	cmp	r3, #4
 800265e:	d11b      	bne.n	8002698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0204 	mvn.w	r2, #4
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8c4 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8b6 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f8c7 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0208 	mvn.w	r2, #8
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2204      	movs	r2, #4
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f89a 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f88c 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f89d 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b10      	cmp	r3, #16
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0210 	mvn.w	r2, #16
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2208      	movs	r2, #8
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f870 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f862 	bl	80027f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f873 	bl	8002820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0201 	mvn.w	r2, #1
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe faac 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f902 	bl	800299c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f838 	bl	8002834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0220 	mvn.w	r2, #32
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8cc 	bl	8002988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a40      	ldr	r2, [pc, #256]	; (800295c <TIM_Base_SetConfig+0x114>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d013      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002866:	d00f      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3d      	ldr	r2, [pc, #244]	; (8002960 <TIM_Base_SetConfig+0x118>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00b      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a3c      	ldr	r2, [pc, #240]	; (8002964 <TIM_Base_SetConfig+0x11c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <TIM_Base_SetConfig+0x120>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d003      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a3a      	ldr	r2, [pc, #232]	; (800296c <TIM_Base_SetConfig+0x124>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <TIM_Base_SetConfig+0x114>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02b      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d027      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <TIM_Base_SetConfig+0x118>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d023      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2b      	ldr	r2, [pc, #172]	; (8002964 <TIM_Base_SetConfig+0x11c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01f      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <TIM_Base_SetConfig+0x120>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01b      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a29      	ldr	r2, [pc, #164]	; (800296c <TIM_Base_SetConfig+0x124>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d017      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <TIM_Base_SetConfig+0x128>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a27      	ldr	r2, [pc, #156]	; (8002974 <TIM_Base_SetConfig+0x12c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00f      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a26      	ldr	r2, [pc, #152]	; (8002978 <TIM_Base_SetConfig+0x130>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00b      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <TIM_Base_SetConfig+0x134>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a24      	ldr	r2, [pc, #144]	; (8002980 <TIM_Base_SetConfig+0x138>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a23      	ldr	r2, [pc, #140]	; (8002984 <TIM_Base_SetConfig+0x13c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d108      	bne.n	800290c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <TIM_Base_SetConfig+0x114>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0xf8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <TIM_Base_SetConfig+0x124>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40010400 	.word	0x40010400
 8002970:	40014000 	.word	0x40014000
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800
 800297c:	40001800 	.word	0x40001800
 8002980:	40001c00 	.word	0x40001c00
 8002984:	40002000 	.word	0x40002000

08002988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e03f      	b.n	8002a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f9b8 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fd7b 	bl	80034f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08a      	sub	sp, #40	; 0x28
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d17c      	bne.n	8002b64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_UART_Transmit+0x2c>
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e075      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_UART_Transmit+0x3e>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e06e      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2221      	movs	r2, #33	; 0x21
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a9e:	f7fe fb55 	bl	800114c <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d108      	bne.n	8002acc <HAL_UART_Transmit+0x82>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e003      	b.n	8002ad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002adc:	e02a      	b.n	8002b34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 faf9 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e036      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3302      	adds	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e007      	b.n	8002b26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	3301      	adds	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1cf      	bne.n	8002ade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fac9 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e006      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0ba      	sub	sp, #232	; 0xe8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x66>
 8002bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fbd3 	bl	800337a <UART_Receive_IT>
      return;
 8002bd4:	e256      	b.n	8003084 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80de 	beq.w	8002d9c <HAL_UART_IRQHandler+0x22c>
 8002be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80d1 	beq.w	8002d9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_UART_IRQHandler+0xae>
 8002c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_UART_IRQHandler+0xd2>
 8002c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_UART_IRQHandler+0xf6>
 8002c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <HAL_UART_IRQHandler+0x126>
 8002c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0208 	orr.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 81ed 	beq.w	800307a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x14e>
 8002cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fb5e 	bl	800337a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <HAL_UART_IRQHandler+0x17a>
 8002ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d04f      	beq.n	8002d8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa66 	bl	80031bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d141      	bne.n	8002d82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3314      	adds	r3, #20
 8002d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1d9      	bne.n	8002cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4a7d      	ldr	r2, [pc, #500]	; (8002f4c <HAL_UART_IRQHandler+0x3dc>)
 8002d58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fb52 	bl	8001408 <HAL_DMA_Abort_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d74:	4610      	mov	r0, r2
 8002d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e00e      	b.n	8002d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f99a 	bl	80030b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	e00a      	b.n	8002d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f996 	bl	80030b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d88:	e006      	b.n	8002d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f992 	bl	80030b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d96:	e170      	b.n	800307a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	bf00      	nop
    return;
 8002d9a:	e16e      	b.n	800307a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 814a 	bne.w	800303a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8143 	beq.w	800303a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 813c 	beq.w	800303a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	f040 80b4 	bne.w	8002f50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8140 	beq.w	800307e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f080 8139 	bcs.w	800307e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1e:	f000 8088 	beq.w	8002f32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1d9      	bne.n	8002e22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3314      	adds	r3, #20
 8002e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e1      	bne.n	8002e6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3314      	adds	r3, #20
 8002eb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3314      	adds	r3, #20
 8002eca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ece:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ed0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e3      	bne.n	8002eaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f02:	f023 0310 	bic.w	r3, r3, #16
 8002f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f14:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e3      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe f9fb 	bl	8001328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8c0 	bl	80030c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f48:	e099      	b.n	800307e <HAL_UART_IRQHandler+0x50e>
 8002f4a:	bf00      	nop
 8002f4c:	08003283 	.word	0x08003283
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 808b 	beq.w	8003082 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8086 	beq.w	8003082 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f9a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e3      	bne.n	8002f76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e3      	bne.n	8002fae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	60fb      	str	r3, [r7, #12]
   return(result);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0310 	bic.w	r3, r3, #16
 800300a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003018:	61fa      	str	r2, [r7, #28]
 800301a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	617b      	str	r3, [r7, #20]
   return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e3      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800302c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f848 	bl	80030c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003038:	e023      	b.n	8003082 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_UART_IRQHandler+0x4ea>
 8003046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f929 	bl	80032aa <UART_Transmit_IT>
    return;
 8003058:	e014      	b.n	8003084 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00e      	beq.n	8003084 <HAL_UART_IRQHandler+0x514>
 8003066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f969 	bl	800334a <UART_EndTransmit_IT>
    return;
 8003078:	e004      	b.n	8003084 <HAL_UART_IRQHandler+0x514>
    return;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <HAL_UART_IRQHandler+0x514>
      return;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_UART_IRQHandler+0x514>
      return;
 8003082:	bf00      	nop
  }
}
 8003084:	37e8      	adds	r7, #232	; 0xe8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop

0800308c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b090      	sub	sp, #64	; 0x40
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f0:	e050      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d04c      	beq.n	8003194 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <UART_WaitOnFlagUntilTimeout+0x30>
 8003100:	f7fe f824 	bl	800114c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800310c:	429a      	cmp	r2, r3
 800310e:	d241      	bcs.n	8003194 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003130:	637a      	str	r2, [r7, #52]	; 0x34
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e5      	bne.n	8003110 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3314      	adds	r3, #20
 800314a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	613b      	str	r3, [r7, #16]
   return(result);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3314      	adds	r3, #20
 8003162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003164:	623a      	str	r2, [r7, #32]
 8003166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	69f9      	ldr	r1, [r7, #28]
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	61bb      	str	r3, [r7, #24]
   return(result);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e00f      	b.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d09f      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3740      	adds	r7, #64	; 0x40
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b095      	sub	sp, #84	; 0x54
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031e4:	643a      	str	r2, [r7, #64]	; 0x40
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	61fb      	str	r3, [r7, #28]
   return(result);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e5      	bne.n	80031f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	2b01      	cmp	r3, #1
 8003232:	d119      	bne.n	8003268 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	60bb      	str	r3, [r7, #8]
   return(result);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 0310 	bic.w	r3, r3, #16
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003254:	61ba      	str	r2, [r7, #24]
 8003256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	613b      	str	r3, [r7, #16]
   return(result);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e5      	bne.n	8003234 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003276:	bf00      	nop
 8003278:	3754      	adds	r7, #84	; 0x54
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff ff09 	bl	80030b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b21      	cmp	r3, #33	; 0x21
 80032bc:	d13e      	bne.n	800333c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c6:	d114      	bne.n	80032f2 <UART_Transmit_IT+0x48>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d110      	bne.n	80032f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	1c9a      	adds	r2, r3, #2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	621a      	str	r2, [r3, #32]
 80032f0:	e008      	b.n	8003304 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	1c59      	adds	r1, r3, #1
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6211      	str	r1, [r2, #32]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4619      	mov	r1, r3
 8003312:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003326:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003336:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fe8e 	bl	800308c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b08c      	sub	sp, #48	; 0x30
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b22      	cmp	r3, #34	; 0x22
 800338c:	f040 80ab 	bne.w	80034e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d117      	bne.n	80033ca <UART_Receive_IT+0x50>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d113      	bne.n	80033ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
 80033c8:	e026      	b.n	8003418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033dc:	d007      	beq.n	80033ee <UART_Receive_IT+0x74>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <UART_Receive_IT+0x82>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e008      	b.n	800340e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003408:	b2da      	uxtb	r2, r3
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29b      	uxth	r3, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4619      	mov	r1, r3
 8003426:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003428:	2b00      	cmp	r3, #0
 800342a:	d15a      	bne.n	80034e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0220 	bic.w	r2, r2, #32
 800343a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800344a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d135      	bne.n	80034d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	613b      	str	r3, [r7, #16]
   return(result);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f023 0310 	bic.w	r3, r3, #16
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003492:	623a      	str	r2, [r7, #32]
 8003494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	69f9      	ldr	r1, [r7, #28]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	61bb      	str	r3, [r7, #24]
   return(result);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e5      	bne.n	8003472 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d10a      	bne.n	80034ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fdf9 	bl	80030c8 <HAL_UARTEx_RxEventCallback>
 80034d6:	e002      	b.n	80034de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fde1 	bl	80030a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e002      	b.n	80034e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
  }
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3730      	adds	r7, #48	; 0x30
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b0c0      	sub	sp, #256	; 0x100
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	ea40 0301 	orr.w	r3, r0, r1
 8003518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003548:	f021 010c 	bic.w	r1, r1, #12
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003556:	430b      	orrs	r3, r1
 8003558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	ea40 0301 	orr.w	r3, r0, r1
 8003576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <UART_SetConfig+0x2cc>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <UART_SetConfig+0xa0>
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <UART_SetConfig+0x2d0>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7fe fa4c 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8003594:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003598:	e003      	b.n	80035a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359a:	f7fe fa33 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 800359e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ac:	f040 810c 	bne.w	80037c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ca:	415b      	adcs	r3, r3
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035d2:	4621      	mov	r1, r4
 80035d4:	eb12 0801 	adds.w	r8, r2, r1
 80035d8:	4629      	mov	r1, r5
 80035da:	eb43 0901 	adc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003600:	462b      	mov	r3, r5
 8003602:	eb49 0303 	adc.w	r3, r9, r3
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003616:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800361a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800361e:	460b      	mov	r3, r1
 8003620:	18db      	adds	r3, r3, r3
 8003622:	653b      	str	r3, [r7, #80]	; 0x50
 8003624:	4613      	mov	r3, r2
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
 800362c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003634:	f7fc fe4c 	bl	80002d0 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <UART_SetConfig+0x2d4>)
 800363e:	fba3 2302 	umull	r2, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011c      	lsls	r4, r3, #4
 8003646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003650:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	1891      	adds	r1, r2, r2
 800365e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003660:	415b      	adcs	r3, r3
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003668:	4641      	mov	r1, r8
 800366a:	eb12 0a01 	adds.w	sl, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0b01 	adc.w	fp, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003688:	4692      	mov	sl, r2
 800368a:	469b      	mov	fp, r3
 800368c:	4643      	mov	r3, r8
 800368e:	eb1a 0303 	adds.w	r3, sl, r3
 8003692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003696:	464b      	mov	r3, r9
 8003698:	eb4b 0303 	adc.w	r3, fp, r3
 800369c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
 80036c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ca:	f7fc fe01 	bl	80002d0 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2301 	umull	r2, r3, r3, r1
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2264      	movs	r2, #100	; 0x64
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	1acb      	subs	r3, r1, r3
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 2302 	umull	r2, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f8:	441c      	add	r4, r3
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003704:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	63b9      	str	r1, [r7, #56]	; 0x38
 8003714:	415b      	adcs	r3, r3
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6339      	str	r1, [r7, #48]	; 0x30
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003768:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800376c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003786:	f7fc fda3 	bl	80002d0 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <UART_SetConfig+0x2d4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <UART_SetConfig+0x2d4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4422      	add	r2, r4
 80037b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b8:	e105      	b.n	80039c6 <UART_SetConfig+0x4d6>
 80037ba:	bf00      	nop
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037da:	4642      	mov	r2, r8
 80037dc:	464b      	mov	r3, r9
 80037de:	1891      	adds	r1, r2, r2
 80037e0:	6239      	str	r1, [r7, #32]
 80037e2:	415b      	adcs	r3, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ea:	4641      	mov	r1, r8
 80037ec:	1854      	adds	r4, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0501 	adc.w	r5, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	00eb      	lsls	r3, r5, #3
 80037fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003802:	00e2      	lsls	r2, r4, #3
 8003804:	4614      	mov	r4, r2
 8003806:	461d      	mov	r5, r3
 8003808:	4643      	mov	r3, r8
 800380a:	18e3      	adds	r3, r4, r3
 800380c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003810:	464b      	mov	r3, r9
 8003812:	eb45 0303 	adc.w	r3, r5, r3
 8003816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003836:	4629      	mov	r1, r5
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4621      	mov	r1, r4
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003848:	f7fc fd42 	bl	80002d0 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	011c      	lsls	r4, r3, #4
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	61b9      	str	r1, [r7, #24]
 8003874:	415b      	adcs	r3, r3
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6139      	str	r1, [r7, #16]
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038e6:	f7fc fcf3 	bl	80002d0 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <UART_SetConfig+0x4e4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	; 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3332      	adds	r3, #50	; 0x32
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390e:	441c      	add	r4, r3
 8003910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003914:	2200      	movs	r2, #0
 8003916:	673b      	str	r3, [r7, #112]	; 0x70
 8003918:	677a      	str	r2, [r7, #116]	; 0x74
 800391a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800391e:	4642      	mov	r2, r8
 8003920:	464b      	mov	r3, r9
 8003922:	1891      	adds	r1, r2, r2
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	415b      	adcs	r3, r3
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392e:	4641      	mov	r1, r8
 8003930:	1851      	adds	r1, r2, r1
 8003932:	6039      	str	r1, [r7, #0]
 8003934:	4649      	mov	r1, r9
 8003936:	414b      	adcs	r3, r1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003946:	4659      	mov	r1, fp
 8003948:	00cb      	lsls	r3, r1, #3
 800394a:	4651      	mov	r1, sl
 800394c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003950:	4651      	mov	r1, sl
 8003952:	00ca      	lsls	r2, r1, #3
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	4603      	mov	r3, r0
 800395a:	4642      	mov	r2, r8
 800395c:	189b      	adds	r3, r3, r2
 800395e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003960:	464b      	mov	r3, r9
 8003962:	460a      	mov	r2, r1
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	663b      	str	r3, [r7, #96]	; 0x60
 8003974:	667a      	str	r2, [r7, #100]	; 0x64
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003982:	4649      	mov	r1, r9
 8003984:	008b      	lsls	r3, r1, #2
 8003986:	4641      	mov	r1, r8
 8003988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398c:	4641      	mov	r1, r8
 800398e:	008a      	lsls	r2, r1, #2
 8003990:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003994:	f7fc fc9c 	bl	80002d0 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <UART_SetConfig+0x4e4>)
 800399e:	fba3 1302 	umull	r1, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2164      	movs	r1, #100	; 0x64
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <UART_SetConfig+0x4e4>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4422      	add	r2, r4
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039cc:	46bd      	mov	sp, r7
 80039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d2:	bf00      	nop
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <__NVIC_SetPriority>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <SysTick_Handler+0x1c>)
 8003a32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a34:	f002 fb24 	bl	8006080 <xTaskGetSchedulerState>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d001      	beq.n	8003a42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a3e:	f000 fecb 	bl	80047d8 <xPortSysTickHandler>
  }
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000e010 	.word	0xe000e010

08003a4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a50:	2100      	movs	r1, #0
 8003a52:	f06f 0004 	mvn.w	r0, #4
 8003a56:	f7ff ffbf 	bl	80039d8 <__NVIC_SetPriority>
#endif
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a66:	f3ef 8305 	mrs	r3, IPSR
 8003a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a72:	f06f 0305 	mvn.w	r3, #5
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e00c      	b.n	8003a94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <osKernelInitialize+0x44>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <osKernelInitialize+0x44>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	e002      	b.n	8003a94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a94:	687b      	ldr	r3, [r7, #4]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000144 	.word	0x20000144

08003aa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aae:	f3ef 8305 	mrs	r3, IPSR
 8003ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ab4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aba:	f06f 0305 	mvn.w	r3, #5
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e010      	b.n	8003ae4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <osKernelStart+0x48>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d109      	bne.n	8003ade <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003aca:	f7ff ffbf 	bl	8003a4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <osKernelStart+0x48>)
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ad4:	f001 fe8c 	bl	80057f0 <vTaskStartScheduler>
      stat = osOK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e002      	b.n	8003ae4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ae4:	687b      	ldr	r3, [r7, #4]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000144 	.word	0x20000144

08003af4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08e      	sub	sp, #56	; 0x38
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b04:	f3ef 8305 	mrs	r3, IPSR
 8003b08:	617b      	str	r3, [r7, #20]
  return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d17e      	bne.n	8003c0e <osThreadNew+0x11a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d07b      	beq.n	8003c0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b1a:	2318      	movs	r3, #24
 8003b1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d045      	beq.n	8003bba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <osThreadNew+0x48>
        name = attr->name;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <osThreadNew+0x6e>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b38      	cmp	r3, #56	; 0x38
 8003b54:	d805      	bhi.n	8003b62 <osThreadNew+0x6e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <osThreadNew+0x72>
        return (NULL);
 8003b62:	2300      	movs	r3, #0
 8003b64:	e054      	b.n	8003c10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <osThreadNew+0xa8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b5b      	cmp	r3, #91	; 0x5b
 8003b84:	d90a      	bls.n	8003b9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <osThreadNew+0xa8>
        mem = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e010      	b.n	8003bbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10c      	bne.n	8003bbe <osThreadNew+0xca>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <osThreadNew+0xca>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <osThreadNew+0xca>
          mem = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e001      	b.n	8003bbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d110      	bne.n	8003be6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bcc:	9202      	str	r2, [sp, #8]
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f001 fc32 	bl	8005444 <xTaskCreateStatic>
 8003be0:	4603      	mov	r3, r0
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e013      	b.n	8003c0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d110      	bne.n	8003c0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f001 fc7d 	bl	80054fe <xTaskCreate>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <osThreadNew+0x11a>
            hTask = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c0e:	693b      	ldr	r3, [r7, #16]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c20:	f3ef 8305 	mrs	r3, IPSR
 8003c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <osDelay+0x1c>
    stat = osErrorISR;
 8003c2c:	f06f 0305 	mvn.w	r3, #5
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e007      	b.n	8003c44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f001 fda2 	bl	8005788 <vTaskDelay>
    }
  }

  return (stat);
 8003c44:	68fb      	ldr	r3, [r7, #12]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b08a      	sub	sp, #40	; 0x28
 8003c52:	af02      	add	r7, sp, #8
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c5e:	f3ef 8305 	mrs	r3, IPSR
 8003c62:	613b      	str	r3, [r7, #16]
  return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d15f      	bne.n	8003d2a <osMessageQueueNew+0xdc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d05c      	beq.n	8003d2a <osMessageQueueNew+0xdc>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d059      	beq.n	8003d2a <osMessageQueueNew+0xdc>
    mem = -1;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d029      	beq.n	8003cd6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <osMessageQueueNew+0x62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b4f      	cmp	r3, #79	; 0x4f
 8003c90:	d90e      	bls.n	8003cb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <osMessageQueueNew+0x62>
        mem = 1;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e014      	b.n	8003cda <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d110      	bne.n	8003cda <osMessageQueueNew+0x8c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10c      	bne.n	8003cda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d108      	bne.n	8003cda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <osMessageQueueNew+0x8c>
          mem = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	e001      	b.n	8003cda <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10b      	bne.n	8003cf8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2100      	movs	r1, #0
 8003cea:	9100      	str	r1, [sp, #0]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fe6a 	bl	80049c8 <xQueueGenericCreateStatic>
 8003cf4:	61f8      	str	r0, [r7, #28]
 8003cf6:	e008      	b.n	8003d0a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fed8 	bl	8004ab8 <xQueueGenericCreate>
 8003d08:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00c      	beq.n	8003d2a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <osMessageQueueNew+0xd0>
        name = attr->name;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e001      	b.n	8003d22 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003d22:	6979      	ldr	r1, [r7, #20]
 8003d24:	69f8      	ldr	r0, [r7, #28]
 8003d26:	f001 fb2f 	bl	8005388 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4c:	f3ef 8305 	mrs	r3, IPSR
 8003d50:	617b      	str	r3, [r7, #20]
  return(result);
 8003d52:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d028      	beq.n	8003daa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <osMessageQueuePut+0x36>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <osMessageQueuePut+0x36>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003d6a:	f06f 0303 	mvn.w	r3, #3
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	e038      	b.n	8003de4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003d76:	f107 0210 	add.w	r2, r7, #16
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	69b8      	ldr	r0, [r7, #24]
 8003d80:	f000 fff6 	bl	8004d70 <xQueueGenericSendFromISR>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d003      	beq.n	8003d92 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003d8a:	f06f 0302 	mvn.w	r3, #2
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e028      	b.n	8003de4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d025      	beq.n	8003de4 <osMessageQueuePut+0xb0>
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <osMessageQueuePut+0xbc>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	e01c      	b.n	8003de4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <osMessageQueuePut+0x82>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003db6:	f06f 0303 	mvn.w	r3, #3
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	e012      	b.n	8003de4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	69b8      	ldr	r0, [r7, #24]
 8003dc6:	f000 fed5 	bl	8004b74 <xQueueGenericSend>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d009      	beq.n	8003de4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003dd6:	f06f 0301 	mvn.w	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	e002      	b.n	8003de4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003dde:	f06f 0302 	mvn.w	r3, #2
 8003de2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003de4:	69fb      	ldr	r3, [r7, #28]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e0a:	f3ef 8305 	mrs	r3, IPSR
 8003e0e:	617b      	str	r3, [r7, #20]
  return(result);
 8003e10:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d028      	beq.n	8003e68 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <osMessageQueueGet+0x34>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <osMessageQueueGet+0x34>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003e28:	f06f 0303 	mvn.w	r3, #3
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e037      	b.n	8003ea0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	69b8      	ldr	r0, [r7, #24]
 8003e3e:	f001 f913 	bl	8005068 <xQueueReceiveFromISR>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d003      	beq.n	8003e50 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003e48:	f06f 0302 	mvn.w	r3, #2
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	e027      	b.n	8003ea0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d024      	beq.n	8003ea0 <osMessageQueueGet+0xac>
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <osMessageQueueGet+0xb8>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	e01b      	b.n	8003ea0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <osMessageQueueGet+0x80>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003e74:	f06f 0303 	mvn.w	r3, #3
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e011      	b.n	8003ea0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	69b8      	ldr	r0, [r7, #24]
 8003e82:	f001 f811 	bl	8004ea8 <xQueueReceive>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d009      	beq.n	8003ea0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003e92:	f06f 0301 	mvn.w	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e002      	b.n	8003ea0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003e9a:	f06f 0302 	mvn.w	r3, #2
 8003e9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4a06      	ldr	r2, [pc, #24]	; (8003ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000148 	.word	0x20000148
 8003ee0:	200001a4 	.word	0x200001a4

08003ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <vApplicationGetTimerTaskMemory+0x30>)
 8003efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	200003a4 	.word	0x200003a4
 8003f14:	20000400 	.word	0x20000400

08003f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f24:	f001 fcca 	bl	80058bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f28:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <pvPortMalloc+0x180>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f30:	f000 f920 	bl	8004174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f34:	4b59      	ldr	r3, [pc, #356]	; (800409c <pvPortMalloc+0x184>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 8093 	bne.w	8004068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01d      	beq.n	8003f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003f48:	2208      	movs	r2, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d014      	beq.n	8003f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f023 0307 	bic.w	r3, r3, #7
 8003f60:	3308      	adds	r3, #8
 8003f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d06e      	beq.n	8004068 <pvPortMalloc+0x150>
 8003f8a:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <pvPortMalloc+0x188>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d869      	bhi.n	8004068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <pvPortMalloc+0x18c>)
 8003f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <pvPortMalloc+0x18c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f9e:	e004      	b.n	8003faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d903      	bls.n	8003fbc <pvPortMalloc+0xa4>
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f1      	bne.n	8003fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fbc:	4b36      	ldr	r3, [pc, #216]	; (8004098 <pvPortMalloc+0x180>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d050      	beq.n	8004068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2208      	movs	r2, #8
 8003fcc:	4413      	add	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad2      	subs	r2, r2, r3
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d91f      	bls.n	8004028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <pvPortMalloc+0xf8>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	613b      	str	r3, [r7, #16]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004022:	69b8      	ldr	r0, [r7, #24]
 8004024:	f000 f908 	bl	8004238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <pvPortMalloc+0x188>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <pvPortMalloc+0x188>)
 8004034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004036:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <pvPortMalloc+0x188>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <pvPortMalloc+0x190>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d203      	bcs.n	800404a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <pvPortMalloc+0x188>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <pvPortMalloc+0x190>)
 8004048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <pvPortMalloc+0x184>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	431a      	orrs	r2, r3
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <pvPortMalloc+0x194>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a11      	ldr	r2, [pc, #68]	; (80040ac <pvPortMalloc+0x194>)
 8004066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004068:	f001 fc36 	bl	80058d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <pvPortMalloc+0x174>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60fb      	str	r3, [r7, #12]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <pvPortMalloc+0x172>
	return pvReturn;
 800408c:	69fb      	ldr	r3, [r7, #28]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3728      	adds	r7, #40	; 0x28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20004408 	.word	0x20004408
 800409c:	2000441c 	.word	0x2000441c
 80040a0:	2000440c 	.word	0x2000440c
 80040a4:	20004400 	.word	0x20004400
 80040a8:	20004410 	.word	0x20004410
 80040ac:	20004414 	.word	0x20004414

080040b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04d      	beq.n	800415e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040c2:	2308      	movs	r3, #8
 80040c4:	425b      	negs	r3, r3
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4413      	add	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <vPortFree+0xb8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <vPortFree+0x44>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	60fb      	str	r3, [r7, #12]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <vPortFree+0x62>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60bb      	str	r3, [r7, #8]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <vPortFree+0xb8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01e      	beq.n	800415e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11a      	bne.n	800415e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <vPortFree+0xb8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	43db      	mvns	r3, r3
 8004132:	401a      	ands	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004138:	f001 fbc0 	bl	80058bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <vPortFree+0xbc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4413      	add	r3, r2
 8004146:	4a09      	ldr	r2, [pc, #36]	; (800416c <vPortFree+0xbc>)
 8004148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800414a:	6938      	ldr	r0, [r7, #16]
 800414c:	f000 f874 	bl	8004238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <vPortFree+0xc0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	4a06      	ldr	r2, [pc, #24]	; (8004170 <vPortFree+0xc0>)
 8004158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800415a:	f001 fbbd 	bl	80058d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800415e:	bf00      	nop
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	2000441c 	.word	0x2000441c
 800416c:	2000440c 	.word	0x2000440c
 8004170:	20004418 	.word	0x20004418

08004174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800417a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800417e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004180:	4b27      	ldr	r3, [pc, #156]	; (8004220 <prvHeapInit+0xac>)
 8004182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0307 	bic.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <prvHeapInit+0xac>)
 80041a4:	4413      	add	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <prvHeapInit+0xb0>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <prvHeapInit+0xb0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4413      	add	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041c0:	2208      	movs	r2, #8
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <prvHeapInit+0xb4>)
 80041d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <prvHeapInit+0xb4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <prvHeapInit+0xb4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <prvHeapInit+0xb4>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a0a      	ldr	r2, [pc, #40]	; (800422c <prvHeapInit+0xb8>)
 8004202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a09      	ldr	r2, [pc, #36]	; (8004230 <prvHeapInit+0xbc>)
 800420a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <prvHeapInit+0xc0>)
 800420e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	20000800 	.word	0x20000800
 8004224:	20004400 	.word	0x20004400
 8004228:	20004408 	.word	0x20004408
 800422c:	20004410 	.word	0x20004410
 8004230:	2000440c 	.word	0x2000440c
 8004234:	2000441c 	.word	0x2000441c

08004238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <prvInsertBlockIntoFreeList+0xac>)
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e002      	b.n	800424c <prvInsertBlockIntoFreeList+0x14>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d8f7      	bhi.n	8004246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4413      	add	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d108      	bne.n	800427a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d118      	bne.n	80042c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d00d      	beq.n	80042b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <prvInsertBlockIntoFreeList+0xb0>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e003      	b.n	80042c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d002      	beq.n	80042d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20004400 	.word	0x20004400
 80042e8:	20004408 	.word	0x20004408

080042ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f103 0208 	add.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f103 0208 	add.w	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d103      	bne.n	80043ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e00c      	b.n	80043c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3308      	adds	r3, #8
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e002      	b.n	80043bc <vListInsert+0x2e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d2f6      	bcs.n	80043b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d103      	bne.n	8004434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1e5a      	subs	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3b04      	subs	r3, #4
 8004464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800446c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b04      	subs	r3, #4
 8004472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3b04      	subs	r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004484:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <pxPortInitialiseStack+0x64>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3b14      	subs	r3, #20
 800448e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b04      	subs	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f06f 0202 	mvn.w	r2, #2
 80044a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3b20      	subs	r3, #32
 80044a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	080044bd 	.word	0x080044bd

080044bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <prvTaskExitError+0x54>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d00a      	beq.n	80044e6 <prvTaskExitError+0x2a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <prvTaskExitError+0x28>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60bb      	str	r3, [r7, #8]
}
 80044f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044fa:	bf00      	nop
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0fc      	beq.n	80044fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000010 	.word	0x20000010
	...

08004520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <pxCurrentTCBConst2>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	6808      	ldr	r0, [r1, #0]
 8004526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	f380 8809 	msr	PSP, r0
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8811 	msr	BASEPRI, r0
 800453a:	4770      	bx	lr
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst2>:
 8004540:	20004468 	.word	0x20004468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004548:	4808      	ldr	r0, [pc, #32]	; (800456c <prvPortStartFirstTask+0x24>)
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f380 8808 	msr	MSP, r0
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8814 	msr	CONTROL, r0
 800455a:	b662      	cpsie	i
 800455c:	b661      	cpsie	f
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	df00      	svc	0
 8004568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800456a:	bf00      	nop
 800456c:	e000ed08 	.word	0xe000ed08

08004570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004576:	4b46      	ldr	r3, [pc, #280]	; (8004690 <xPortStartScheduler+0x120>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a46      	ldr	r2, [pc, #280]	; (8004694 <xPortStartScheduler+0x124>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10a      	bne.n	8004596 <xPortStartScheduler+0x26>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004596:	4b3e      	ldr	r3, [pc, #248]	; (8004690 <xPortStartScheduler+0x120>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3f      	ldr	r2, [pc, #252]	; (8004698 <xPortStartScheduler+0x128>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10a      	bne.n	80045b6 <xPortStartScheduler+0x46>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045b6:	4b39      	ldr	r3, [pc, #228]	; (800469c <xPortStartScheduler+0x12c>)
 80045b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	22ff      	movs	r2, #255	; 0xff
 80045c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <xPortStartScheduler+0x130>)
 80045dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045de:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <xPortStartScheduler+0x134>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045e4:	e009      	b.n	80045fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80045e6:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <xPortStartScheduler+0x134>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <xPortStartScheduler+0x134>)
 80045ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d0ef      	beq.n	80045e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004606:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <xPortStartScheduler+0x134>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1c3 0307 	rsb	r3, r3, #7
 800460e:	2b04      	cmp	r3, #4
 8004610:	d00a      	beq.n	8004628 <xPortStartScheduler+0xb8>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60bb      	str	r3, [r7, #8]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <xPortStartScheduler+0x134>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <xPortStartScheduler+0x134>)
 8004630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <xPortStartScheduler+0x134>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <xPortStartScheduler+0x134>)
 800463c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004646:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <xPortStartScheduler+0x138>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <xPortStartScheduler+0x138>)
 800464c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <xPortStartScheduler+0x138>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <xPortStartScheduler+0x138>)
 8004658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800465c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800465e:	f000 f8dd 	bl	800481c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <xPortStartScheduler+0x13c>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004668:	f000 f8fc 	bl	8004864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <xPortStartScheduler+0x140>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <xPortStartScheduler+0x140>)
 8004672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004678:	f7ff ff66 	bl	8004548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800467c:	f001 fa94 	bl	8005ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8004680:	f7ff ff1c 	bl	80044bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00
 8004694:	410fc271 	.word	0x410fc271
 8004698:	410fc270 	.word	0x410fc270
 800469c:	e000e400 	.word	0xe000e400
 80046a0:	20004420 	.word	0x20004420
 80046a4:	20004424 	.word	0x20004424
 80046a8:	e000ed20 	.word	0xe000ed20
 80046ac:	20000010 	.word	0x20000010
 80046b0:	e000ef34 	.word	0xe000ef34

080046b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	607b      	str	r3, [r7, #4]
}
 80046cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <vPortEnterCritical+0x58>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	4a0d      	ldr	r2, [pc, #52]	; (800470c <vPortEnterCritical+0x58>)
 80046d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <vPortEnterCritical+0x58>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d10f      	bne.n	8004700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <vPortEnterCritical+0x5c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <vPortEnterCritical+0x4c>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	603b      	str	r3, [r7, #0]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <vPortEnterCritical+0x4a>
	}
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	20000010 	.word	0x20000010
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <vPortExitCritical+0x50>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <vPortExitCritical+0x24>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	607b      	str	r3, [r7, #4]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <vPortExitCritical+0x50>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <vPortExitCritical+0x50>)
 8004740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <vPortExitCritical+0x50>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <vPortExitCritical+0x42>
 800474a:	2300      	movs	r3, #0
 800474c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000010 	.word	0x20000010
	...

08004770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004770:	f3ef 8009 	mrs	r0, PSP
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <pxCurrentTCBConst>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	f01e 0f10 	tst.w	lr, #16
 8004780:	bf08      	it	eq
 8004782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478a:	6010      	str	r0, [r2, #0]
 800478c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004794:	f380 8811 	msr	BASEPRI, r0
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f001 fa02 	bl	8005ba8 <vTaskSwitchContext>
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f380 8811 	msr	BASEPRI, r0
 80047ac:	bc09      	pop	{r0, r3}
 80047ae:	6819      	ldr	r1, [r3, #0]
 80047b0:	6808      	ldr	r0, [r1, #0]
 80047b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b6:	f01e 0f10 	tst.w	lr, #16
 80047ba:	bf08      	it	eq
 80047bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047c0:	f380 8809 	msr	PSP, r0
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w

080047d0 <pxCurrentTCBConst>:
 80047d0:	20004468 	.word	0x20004468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop

080047d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
}
 80047f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047f2:	f001 f91f 	bl	8005a34 <xTaskIncrementTick>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <xPortSysTickHandler+0x40>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	2300      	movs	r3, #0
 8004806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f383 8811 	msr	BASEPRI, r3
}
 800480e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vPortSetupTimerInterrupt+0x34>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <vPortSetupTimerInterrupt+0x38>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <vPortSetupTimerInterrupt+0x3c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <vPortSetupTimerInterrupt+0x40>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <vPortSetupTimerInterrupt+0x44>)
 800483a:	3b01      	subs	r3, #1
 800483c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <vPortSetupTimerInterrupt+0x34>)
 8004840:	2207      	movs	r2, #7
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e010 	.word	0xe000e010
 8004854:	e000e018 	.word	0xe000e018
 8004858:	20000004 	.word	0x20000004
 800485c:	10624dd3 	.word	0x10624dd3
 8004860:	e000e014 	.word	0xe000e014

08004864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004874 <vPortEnableVFP+0x10>
 8004868:	6801      	ldr	r1, [r0, #0]
 800486a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800486e:	6001      	str	r1, [r0, #0]
 8004870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004872:	bf00      	nop
 8004874:	e000ed88 	.word	0xe000ed88

08004878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800487e:	f3ef 8305 	mrs	r3, IPSR
 8004882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	d914      	bls.n	80048b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <vPortValidateInterruptPriority+0x70>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <vPortValidateInterruptPriority+0x74>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	7afa      	ldrb	r2, [r7, #11]
 800489a:	429a      	cmp	r2, r3
 800489c:	d20a      	bcs.n	80048b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <vPortValidateInterruptPriority+0x78>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <vPortValidateInterruptPriority+0x7c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d90a      	bls.n	80048da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	603b      	str	r3, [r7, #0]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <vPortValidateInterruptPriority+0x60>
	}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e3f0 	.word	0xe000e3f0
 80048ec:	20004420 	.word	0x20004420
 80048f0:	e000ed0c 	.word	0xe000ed0c
 80048f4:	20004424 	.word	0x20004424

080048f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xQueueGenericReset+0x2a>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60bb      	str	r3, [r7, #8]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004922:	f7ff fec7 	bl	80046b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	3b01      	subs	r3, #1
 8004954:	68f9      	ldr	r1, [r7, #12]
 8004956:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	22ff      	movs	r2, #255	; 0xff
 800496e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d114      	bne.n	80049a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01a      	beq.n	80049b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3310      	adds	r3, #16
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f9bd 	bl	8005d04 <xTaskRemoveFromEventList>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <xQueueGenericReset+0xcc>)
 8004992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	e009      	b.n	80049b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3310      	adds	r3, #16
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fca0 	bl	80042ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3324      	adds	r3, #36	; 0x24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fc9b 	bl	80042ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049b6:	f7ff fead 	bl	8004714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049ba:	2301      	movs	r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08e      	sub	sp, #56	; 0x38
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <xQueueGenericCreateStatic+0x52>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <xQueueGenericCreateStatic+0x56>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericCreateStatic+0x58>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	623b      	str	r3, [r7, #32]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <xQueueGenericCreateStatic+0x7e>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <xQueueGenericCreateStatic+0x82>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericCreateStatic+0x84>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61fb      	str	r3, [r7, #28]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a66:	2350      	movs	r3, #80	; 0x50
 8004a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b50      	cmp	r3, #80	; 0x50
 8004a6e:	d00a      	beq.n	8004a86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61bb      	str	r3, [r7, #24]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f83f 	bl	8004b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	613b      	str	r3, [r7, #16]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	3350      	adds	r3, #80	; 0x50
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fa11 	bl	8003f18 <pvPortMalloc>
 8004af6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d011      	beq.n	8004b22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3350      	adds	r3, #80	; 0x50
 8004b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f805 	bl	8004b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b22:	69bb      	ldr	r3, [r7, #24]
	}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	69b8      	ldr	r0, [r7, #24]
 8004b5e:	f7ff fecb 	bl	80048f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08e      	sub	sp, #56	; 0x38
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueGenericSend+0x32>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <xQueueGenericSend+0x40>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <xQueueGenericSend+0x44>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <xQueueGenericSend+0x46>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <xQueueGenericSend+0x60>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d103      	bne.n	8004be2 <xQueueGenericSend+0x6e>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <xQueueGenericSend+0x72>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <xQueueGenericSend+0x74>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	623b      	str	r3, [r7, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c02:	f001 fa3d 	bl	8006080 <xTaskGetSchedulerState>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <xQueueGenericSend+0x9e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <xQueueGenericSend+0xa2>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <xQueueGenericSend+0xa4>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xQueueGenericSend+0xbe>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	61fb      	str	r3, [r7, #28]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c32:	f7ff fd3f 	bl	80046b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <xQueueGenericSend+0xd4>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d129      	bne.n	8004c9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4e:	f000 fa8b 	bl	8005168 <prvCopyDataToQueue>
 8004c52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 f84f 	bl	8005d04 <xTaskRemoveFromEventList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <xQueueGenericSend+0x1f8>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	e00a      	b.n	8004c94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <xQueueGenericSend+0x1f8>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c94:	f7ff fd3e 	bl	8004714 <vPortExitCritical>
				return pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e063      	b.n	8004d64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ca2:	f7ff fd37 	bl	8004714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e05c      	b.n	8004d64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 f889 	bl	8005dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cbe:	f7ff fd29 	bl	8004714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cc2:	f000 fdfb 	bl	80058bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cc6:	f7ff fcf5 	bl	80046b4 <vPortEnterCritical>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d103      	bne.n	8004ce0 <xQueueGenericSend+0x16c>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSend+0x182>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf6:	f7ff fd0d 	bl	8004714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cfa:	1d3a      	adds	r2, r7, #4
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 f878 	bl	8005df8 <xTaskCheckForTimeOut>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d124      	bne.n	8004d58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d10:	f000 fb22 	bl	8005358 <prvIsQueueFull>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d018      	beq.n	8004d4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ff9e 	bl	8005c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 faad 	bl	8005288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d2e:	f000 fdd3 	bl	80058d8 <xTaskResumeAll>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f af7c 	bne.w	8004c32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <xQueueGenericSend+0x1f8>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	e772      	b.n	8004c32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4e:	f000 fa9b 	bl	8005288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d52:	f000 fdc1 	bl	80058d8 <xTaskResumeAll>
 8004d56:	e76c      	b.n	8004c32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5a:	f000 fa95 	bl	8005288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d5e:	f000 fdbb 	bl	80058d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3738      	adds	r7, #56	; 0x38
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b090      	sub	sp, #64	; 0x40
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <xQueueGenericSendFromISR+0x3c>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <xQueueGenericSendFromISR+0x40>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueGenericSendFromISR+0x42>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10a      	bne.n	8004dcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSendFromISR+0x6a>
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <xQueueGenericSendFromISR+0x6e>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <xQueueGenericSendFromISR+0x70>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	623b      	str	r3, [r7, #32]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dfa:	f7ff fd3d 	bl	8004878 <vPortValidateInterruptPriority>
	__asm volatile
 8004dfe:	f3ef 8211 	mrs	r2, BASEPRI
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	61fa      	str	r2, [r7, #28]
 8004e14:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004e16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <xQueueGenericSendFromISR+0xbc>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d12f      	bne.n	8004e8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e42:	f000 f991 	bl	8005168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d112      	bne.n	8004e76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d016      	beq.n	8004e86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 ff51 	bl	8005d04 <xTaskRemoveFromEventList>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00e      	beq.n	8004e86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e007      	b.n	8004e86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	b25a      	sxtb	r2, r3
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e86:	2301      	movs	r3, #1
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e8a:	e001      	b.n	8004e90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f383 8811 	msr	BASEPRI, r3
}
 8004e9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3740      	adds	r7, #64	; 0x40
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	; 0x30
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <xQueueReceive+0x30>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	623b      	str	r3, [r7, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <xQueueReceive+0x3e>
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <xQueueReceive+0x42>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueReceive+0x44>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <xQueueReceive+0x5e>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61fb      	str	r3, [r7, #28]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f06:	f001 f8bb 	bl	8006080 <xTaskGetSchedulerState>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <xQueueReceive+0x6e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <xQueueReceive+0x72>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <xQueueReceive+0x74>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xQueueReceive+0x8e>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	61bb      	str	r3, [r7, #24]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f36:	f7ff fbbd 	bl	80046b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01f      	beq.n	8004f86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4a:	f000 f977 	bl	800523c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00f      	beq.n	8004f7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	3310      	adds	r3, #16
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fece 	bl	8005d04 <xTaskRemoveFromEventList>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f6e:	4b3d      	ldr	r3, [pc, #244]	; (8005064 <xQueueReceive+0x1bc>)
 8004f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f7e:	f7ff fbc9 	bl	8004714 <vPortExitCritical>
				return pdPASS;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e069      	b.n	800505a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f8c:	f7ff fbc2 	bl	8004714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e062      	b.n	800505a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f9a:	f107 0310 	add.w	r3, r7, #16
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ff14 	bl	8005dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fa8:	f7ff fbb4 	bl	8004714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fac:	f000 fc86 	bl	80058bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb0:	f7ff fb80 	bl	80046b4 <vPortEnterCritical>
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fba:	b25b      	sxtb	r3, r3
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d103      	bne.n	8004fca <xQueueReceive+0x122>
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d103      	bne.n	8004fe0 <xQueueReceive+0x138>
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe0:	f7ff fb98 	bl	8004714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe4:	1d3a      	adds	r2, r7, #4
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 ff03 	bl	8005df8 <xTaskCheckForTimeOut>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d123      	bne.n	8005040 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffa:	f000 f997 	bl	800532c <prvIsQueueEmpty>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d017      	beq.n	8005034 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	3324      	adds	r3, #36	; 0x24
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fe29 	bl	8005c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005014:	f000 f938 	bl	8005288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005018:	f000 fc5e 	bl	80058d8 <xTaskResumeAll>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d189      	bne.n	8004f36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <xQueueReceive+0x1bc>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	e780      	b.n	8004f36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005036:	f000 f927 	bl	8005288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800503a:	f000 fc4d 	bl	80058d8 <xTaskResumeAll>
 800503e:	e77a      	b.n	8004f36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005042:	f000 f921 	bl	8005288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005046:	f000 fc47 	bl	80058d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800504a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504c:	f000 f96e 	bl	800532c <prvIsQueueEmpty>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	f43f af6f 	beq.w	8004f36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005058:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800505a:	4618      	mov	r0, r3
 800505c:	3730      	adds	r7, #48	; 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	; 0x38
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	623b      	str	r3, [r7, #32]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <xQueueReceiveFromISR+0x3a>
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <xQueueReceiveFromISR+0x3e>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueReceiveFromISR+0x40>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61fb      	str	r3, [r7, #28]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050c2:	f7ff fbd9 	bl	8004878 <vPortValidateInterruptPriority>
	__asm volatile
 80050c6:	f3ef 8211 	mrs	r2, BASEPRI
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	61ba      	str	r2, [r7, #24]
 80050dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02f      	beq.n	800514e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050fc:	f000 f89e 	bl	800523c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d112      	bne.n	8005138 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	3310      	adds	r3, #16
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fdf0 	bl	8005d04 <xTaskRemoveFromEventList>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e007      	b.n	8005148 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800513c:	3301      	adds	r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	b25a      	sxtb	r2, r3
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005148:	2301      	movs	r3, #1
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
 800514c:	e001      	b.n	8005152 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800514e:	2300      	movs	r3, #0
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f383 8811 	msr	BASEPRI, r3
}
 800515c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005160:	4618      	mov	r0, r3
 8005162:	3738      	adds	r7, #56	; 0x38
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d14d      	bne.n	800522a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 ff92 	bl	80060bc <xTaskPriorityDisinherit>
 8005198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	e043      	b.n	800522a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d119      	bne.n	80051dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6858      	ldr	r0, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	461a      	mov	r2, r3
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	f001 fd89 	bl	8006cca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d32b      	bcc.n	800522a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	e026      	b.n	800522a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68d8      	ldr	r0, [r3, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	461a      	mov	r2, r3
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	f001 fd6f 	bl	8006cca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	425b      	negs	r3, r3
 80051f6:	441a      	add	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d207      	bcs.n	8005218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	425b      	negs	r3, r3
 8005212:	441a      	add	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d105      	bne.n	800522a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3b01      	subs	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005232:	697b      	ldr	r3, [r7, #20]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	429a      	cmp	r2, r3
 8005266:	d303      	bcc.n	8005270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68d9      	ldr	r1, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	461a      	mov	r2, r3
 800527a:	6838      	ldr	r0, [r7, #0]
 800527c:	f001 fd25 	bl	8006cca <memcpy>
	}
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005290:	f7ff fa10 	bl	80046b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529c:	e011      	b.n	80052c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d012      	beq.n	80052cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3324      	adds	r3, #36	; 0x24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fd2a 	bl	8005d04 <xTaskRemoveFromEventList>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052b6:	f000 fe01 	bl	8005ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	3b01      	subs	r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dce9      	bgt.n	800529e <prvUnlockQueue+0x16>
 80052ca:	e000      	b.n	80052ce <prvUnlockQueue+0x46>
					break;
 80052cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	22ff      	movs	r2, #255	; 0xff
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052d6:	f7ff fa1d 	bl	8004714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052da:	f7ff f9eb 	bl	80046b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e6:	e011      	b.n	800530c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3310      	adds	r3, #16
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd05 	bl	8005d04 <xTaskRemoveFromEventList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005300:	f000 fddc 	bl	8005ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	3b01      	subs	r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800530c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005310:	2b00      	cmp	r3, #0
 8005312:	dce9      	bgt.n	80052e8 <prvUnlockQueue+0x60>
 8005314:	e000      	b.n	8005318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005320:	f7ff f9f8 	bl	8004714 <vPortExitCritical>
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005334:	f7ff f9be 	bl	80046b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e001      	b.n	800534a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800534a:	f7ff f9e3 	bl	8004714 <vPortExitCritical>

	return xReturn;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005360:	f7ff f9a8 	bl	80046b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	429a      	cmp	r2, r3
 800536e:	d102      	bne.n	8005376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e001      	b.n	800537a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f7ff f9cb 	bl	8004714 <vPortExitCritical>

	return xReturn;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e014      	b.n	80053c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005398:	4a0f      	ldr	r2, [pc, #60]	; (80053d8 <vQueueAddToRegistry+0x50>)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053a4:	490c      	ldr	r1, [pc, #48]	; (80053d8 <vQueueAddToRegistry+0x50>)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ae:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <vQueueAddToRegistry+0x50>)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053ba:	e006      	b.n	80053ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b07      	cmp	r3, #7
 80053c6:	d9e7      	bls.n	8005398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20004428 	.word	0x20004428

080053dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053ec:	f7ff f962 	bl	80046b4 <vPortEnterCritical>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d103      	bne.n	8005406 <vQueueWaitForMessageRestricted+0x2a>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800540c:	b25b      	sxtb	r3, r3
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d103      	bne.n	800541c <vQueueWaitForMessageRestricted+0x40>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800541c:	f7ff f97a 	bl	8004714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fc3b 	bl	8005cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005436:	6978      	ldr	r0, [r7, #20]
 8005438:	f7ff ff26 	bl	8005288 <prvUnlockQueue>
	}
 800543c:	bf00      	nop
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08e      	sub	sp, #56	; 0x38
 8005448:	af04      	add	r7, sp, #16
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	623b      	str	r3, [r7, #32]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xTaskCreateStatic+0x46>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61fb      	str	r3, [r7, #28]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800548a:	235c      	movs	r3, #92	; 0x5c
 800548c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b5c      	cmp	r3, #92	; 0x5c
 8005492:	d00a      	beq.n	80054aa <xTaskCreateStatic+0x66>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	61bb      	str	r3, [r7, #24]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01e      	beq.n	80054f0 <xTaskCreateStatic+0xac>
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01b      	beq.n	80054f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054ca:	2300      	movs	r3, #0
 80054cc:	9303      	str	r3, [sp, #12]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	f107 0314 	add.w	r3, r7, #20
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f850 	bl	8005588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054ea:	f000 f8dd 	bl	80056a8 <prvAddNewTaskToReadyList>
 80054ee:	e001      	b.n	80054f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054f4:	697b      	ldr	r3, [r7, #20]
	}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3728      	adds	r7, #40	; 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b08c      	sub	sp, #48	; 0x30
 8005502:	af04      	add	r7, sp, #16
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fd00 	bl	8003f18 <pvPortMalloc>
 8005518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005520:	205c      	movs	r0, #92	; 0x5c
 8005522:	f7fe fcf9 	bl	8003f18 <pvPortMalloc>
 8005526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
 8005534:	e005      	b.n	8005542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005536:	6978      	ldr	r0, [r7, #20]
 8005538:	f7fe fdba 	bl	80040b0 <vPortFree>
 800553c:	e001      	b.n	8005542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d017      	beq.n	8005578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	2300      	movs	r3, #0
 8005554:	9303      	str	r3, [sp, #12]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f80e 	bl	8005588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800556c:	69f8      	ldr	r0, [r7, #28]
 800556e:	f000 f89b 	bl	80056a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e002      	b.n	800557e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005578:	f04f 33ff 	mov.w	r3, #4294967295
 800557c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800557e:	69bb      	ldr	r3, [r7, #24]
	}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	461a      	mov	r2, r3
 80055a0:	21a5      	movs	r1, #165	; 0xa5
 80055a2:	f001 fba0 	bl	8006ce6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055b0:	3b01      	subs	r3, #1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	617b      	str	r3, [r7, #20]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01f      	beq.n	8005626 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e012      	b.n	8005612 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	7819      	ldrb	r1, [r3, #0]
 80055f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	3334      	adds	r3, #52	; 0x34
 80055fc:	460a      	mov	r2, r1
 80055fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	3301      	adds	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d9e9      	bls.n	80055ec <prvInitialiseNewTask+0x64>
 8005618:	e000      	b.n	800561c <prvInitialiseNewTask+0x94>
			{
				break;
 800561a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005624:	e003      	b.n	800562e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	2b37      	cmp	r3, #55	; 0x37
 8005632:	d901      	bls.n	8005638 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005634:	2337      	movs	r3, #55	; 0x37
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005642:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fe6c 	bl	800432c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	3318      	adds	r3, #24
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fe67 	bl	800432c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005672:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2200      	movs	r2, #0
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	69b8      	ldr	r0, [r7, #24]
 8005688:	f7fe fee4 	bl	8004454 <pxPortInitialiseStack>
 800568c:	4602      	mov	r2, r0
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569e:	bf00      	nop
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056b0:	f7ff f800 	bl	80046b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b4:	4b2d      	ldr	r3, [pc, #180]	; (800576c <prvAddNewTaskToReadyList+0xc4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	4a2c      	ldr	r2, [pc, #176]	; (800576c <prvAddNewTaskToReadyList+0xc4>)
 80056bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <prvAddNewTaskToReadyList+0xc8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056c6:	4a2a      	ldr	r2, [pc, #168]	; (8005770 <prvAddNewTaskToReadyList+0xc8>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056cc:	4b27      	ldr	r3, [pc, #156]	; (800576c <prvAddNewTaskToReadyList+0xc4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d110      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d4:	f000 fc16 	bl	8005f04 <prvInitialiseTaskLists>
 80056d8:	e00d      	b.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056da:	4b26      	ldr	r3, [pc, #152]	; (8005774 <prvAddNewTaskToReadyList+0xcc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056e2:	4b23      	ldr	r3, [pc, #140]	; (8005770 <prvAddNewTaskToReadyList+0xc8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d802      	bhi.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056f0:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <prvAddNewTaskToReadyList+0xc8>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <prvAddNewTaskToReadyList+0xd0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <prvAddNewTaskToReadyList+0xd0>)
 80056fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005700:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <prvAddNewTaskToReadyList+0xd0>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4b1b      	ldr	r3, [pc, #108]	; (800577c <prvAddNewTaskToReadyList+0xd4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <prvAddNewTaskToReadyList+0x74>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <prvAddNewTaskToReadyList+0xd4>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a15      	ldr	r2, [pc, #84]	; (8005780 <prvAddNewTaskToReadyList+0xd8>)
 800572a:	441a      	add	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe fe07 	bl	8004346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005738:	f7fe ffec 	bl	8004714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <prvAddNewTaskToReadyList+0xcc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00e      	beq.n	8005762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005744:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <prvAddNewTaskToReadyList+0xc8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d207      	bcs.n	8005762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <prvAddNewTaskToReadyList+0xdc>)
 8005754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	2000493c 	.word	0x2000493c
 8005770:	20004468 	.word	0x20004468
 8005774:	20004948 	.word	0x20004948
 8005778:	20004958 	.word	0x20004958
 800577c:	20004944 	.word	0x20004944
 8005780:	2000446c 	.word	0x2000446c
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d017      	beq.n	80057ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <vTaskDelay+0x60>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <vTaskDelay+0x30>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60bb      	str	r3, [r7, #8]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057b8:	f000 f880 	bl	80058bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057bc:	2100      	movs	r1, #0
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fcea 	bl	8006198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057c4:	f000 f888 	bl	80058d8 <xTaskResumeAll>
 80057c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <vTaskDelay+0x64>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20004964 	.word	0x20004964
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057fe:	463a      	mov	r2, r7
 8005800:	1d39      	adds	r1, r7, #4
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fb52 	bl	8003eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	460a      	mov	r2, r1
 800581e:	4921      	ldr	r1, [pc, #132]	; (80058a4 <vTaskStartScheduler+0xb4>)
 8005820:	4821      	ldr	r0, [pc, #132]	; (80058a8 <vTaskStartScheduler+0xb8>)
 8005822:	f7ff fe0f 	bl	8005444 <xTaskCreateStatic>
 8005826:	4603      	mov	r3, r0
 8005828:	4a20      	ldr	r2, [pc, #128]	; (80058ac <vTaskStartScheduler+0xbc>)
 800582a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800582c:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <vTaskStartScheduler+0xbc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e001      	b.n	800583e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005844:	f000 fcfc 	bl	8006240 <xTimerCreateTimerTask>
 8005848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d116      	bne.n	800587e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
}
 8005862:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <vTaskStartScheduler+0xc0>)
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <vTaskStartScheduler+0xc4>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <vTaskStartScheduler+0xc8>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005878:	f7fe fe7a 	bl	8004570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800587c:	e00e      	b.n	800589c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d10a      	bne.n	800589c <vTaskStartScheduler+0xac>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <vTaskStartScheduler+0xaa>
}
 800589c:	bf00      	nop
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	08007bc8 	.word	0x08007bc8
 80058a8:	08005ed5 	.word	0x08005ed5
 80058ac:	20004960 	.word	0x20004960
 80058b0:	2000495c 	.word	0x2000495c
 80058b4:	20004948 	.word	0x20004948
 80058b8:	20004940 	.word	0x20004940

080058bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <vTaskSuspendAll+0x18>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a03      	ldr	r2, [pc, #12]	; (80058d4 <vTaskSuspendAll+0x18>)
 80058c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ca:	bf00      	nop
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20004964 	.word	0x20004964

080058d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058e6:	4b42      	ldr	r3, [pc, #264]	; (80059f0 <xTaskResumeAll+0x118>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <xTaskResumeAll+0x2c>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005904:	f7fe fed6 	bl	80046b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005908:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <xTaskResumeAll+0x118>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a38      	ldr	r2, [pc, #224]	; (80059f0 <xTaskResumeAll+0x118>)
 8005910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005912:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <xTaskResumeAll+0x118>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d162      	bne.n	80059e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800591a:	4b36      	ldr	r3, [pc, #216]	; (80059f4 <xTaskResumeAll+0x11c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d05e      	beq.n	80059e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005922:	e02f      	b.n	8005984 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005924:	4b34      	ldr	r3, [pc, #208]	; (80059f8 <xTaskResumeAll+0x120>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3318      	adds	r3, #24
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fd65 	bl	8004400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3304      	adds	r3, #4
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fd60 	bl	8004400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <xTaskResumeAll+0x124>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d903      	bls.n	8005954 <xTaskResumeAll+0x7c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <xTaskResumeAll+0x124>)
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <xTaskResumeAll+0x128>)
 8005962:	441a      	add	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f7fe fceb 	bl	8004346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <xTaskResumeAll+0x12c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800597e:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <xTaskResumeAll+0x130>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <xTaskResumeAll+0x120>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1cb      	bne.n	8005924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005992:	f000 fb55 	bl	8006040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005996:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <xTaskResumeAll+0x134>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d010      	beq.n	80059c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f000 f847 	bl	8005a34 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059ac:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <xTaskResumeAll+0x130>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f1      	bne.n	80059a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <xTaskResumeAll+0x134>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059c4:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <xTaskResumeAll+0x130>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <xTaskResumeAll+0x138>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059e0:	f7fe fe98 	bl	8004714 <vPortExitCritical>

	return xAlreadyYielded;
 80059e4:	68bb      	ldr	r3, [r7, #8]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20004964 	.word	0x20004964
 80059f4:	2000493c 	.word	0x2000493c
 80059f8:	200048fc 	.word	0x200048fc
 80059fc:	20004944 	.word	0x20004944
 8005a00:	2000446c 	.word	0x2000446c
 8005a04:	20004468 	.word	0x20004468
 8005a08:	20004950 	.word	0x20004950
 8005a0c:	2000494c 	.word	0x2000494c
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <xTaskGetTickCount+0x1c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a20:	687b      	ldr	r3, [r7, #4]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20004940 	.word	0x20004940

08005a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a3e:	4b4f      	ldr	r3, [pc, #316]	; (8005b7c <xTaskIncrementTick+0x148>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f040 808f 	bne.w	8005b66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a48:	4b4d      	ldr	r3, [pc, #308]	; (8005b80 <xTaskIncrementTick+0x14c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a50:	4a4b      	ldr	r2, [pc, #300]	; (8005b80 <xTaskIncrementTick+0x14c>)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d120      	bne.n	8005a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a5c:	4b49      	ldr	r3, [pc, #292]	; (8005b84 <xTaskIncrementTick+0x150>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	603b      	str	r3, [r7, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <xTaskIncrementTick+0x46>
 8005a7c:	4b41      	ldr	r3, [pc, #260]	; (8005b84 <xTaskIncrementTick+0x150>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	4b41      	ldr	r3, [pc, #260]	; (8005b88 <xTaskIncrementTick+0x154>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3f      	ldr	r2, [pc, #252]	; (8005b84 <xTaskIncrementTick+0x150>)
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	; (8005b88 <xTaskIncrementTick+0x154>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b3e      	ldr	r3, [pc, #248]	; (8005b8c <xTaskIncrementTick+0x158>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a3d      	ldr	r2, [pc, #244]	; (8005b8c <xTaskIncrementTick+0x158>)
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	f000 fad1 	bl	8006040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a9e:	4b3c      	ldr	r3, [pc, #240]	; (8005b90 <xTaskIncrementTick+0x15c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d349      	bcc.n	8005b3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa8:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <xTaskIncrementTick+0x150>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab2:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <xTaskIncrementTick+0x15c>)
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	601a      	str	r2, [r3, #0]
					break;
 8005aba:	e03f      	b.n	8005b3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005abc:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <xTaskIncrementTick+0x150>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d203      	bcs.n	8005adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ad4:	4a2e      	ldr	r2, [pc, #184]	; (8005b90 <xTaskIncrementTick+0x15c>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ada:	e02f      	b.n	8005b3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe fc8d 	bl	8004400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	3318      	adds	r3, #24
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fc84 	bl	8004400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <xTaskIncrementTick+0x160>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <xTaskIncrementTick+0xd8>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <xTaskIncrementTick+0x160>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <xTaskIncrementTick+0x164>)
 8005b1a:	441a      	add	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fe fc0f 	bl	8004346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <xTaskIncrementTick+0x168>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d3b8      	bcc.n	8005aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b3a:	e7b5      	b.n	8005aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b3c:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <xTaskIncrementTick+0x168>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	4915      	ldr	r1, [pc, #84]	; (8005b98 <xTaskIncrementTick+0x164>)
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d901      	bls.n	8005b58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <xTaskIncrementTick+0x16c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e004      	b.n	8005b70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b66:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <xTaskIncrementTick+0x170>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <xTaskIncrementTick+0x170>)
 8005b6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b70:	697b      	ldr	r3, [r7, #20]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20004964 	.word	0x20004964
 8005b80:	20004940 	.word	0x20004940
 8005b84:	200048f4 	.word	0x200048f4
 8005b88:	200048f8 	.word	0x200048f8
 8005b8c:	20004954 	.word	0x20004954
 8005b90:	2000495c 	.word	0x2000495c
 8005b94:	20004944 	.word	0x20004944
 8005b98:	2000446c 	.word	0x2000446c
 8005b9c:	20004468 	.word	0x20004468
 8005ba0:	20004950 	.word	0x20004950
 8005ba4:	2000494c 	.word	0x2000494c

08005ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bae:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <vTaskSwitchContext+0xa8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <vTaskSwitchContext+0xac>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bbc:	e041      	b.n	8005c42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <vTaskSwitchContext+0xac>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc4:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <vTaskSwitchContext+0xb0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e010      	b.n	8005bee <vTaskSwitchContext+0x46>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	607b      	str	r3, [r7, #4]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <vTaskSwitchContext+0x3e>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	491b      	ldr	r1, [pc, #108]	; (8005c5c <vTaskSwitchContext+0xb4>)
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0e4      	beq.n	8005bcc <vTaskSwitchContext+0x24>
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <vTaskSwitchContext+0xb4>)
 8005c0e:	4413      	add	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	3308      	adds	r3, #8
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d104      	bne.n	8005c32 <vTaskSwitchContext+0x8a>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <vTaskSwitchContext+0xb8>)
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4a06      	ldr	r2, [pc, #24]	; (8005c58 <vTaskSwitchContext+0xb0>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20004964 	.word	0x20004964
 8005c54:	20004950 	.word	0x20004950
 8005c58:	20004944 	.word	0x20004944
 8005c5c:	2000446c 	.word	0x2000446c
 8005c60:	20004468 	.word	0x20004468

08005c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60fb      	str	r3, [r7, #12]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <vTaskPlaceOnEventList+0x44>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3318      	adds	r3, #24
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fe fb7b 	bl	800438e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c98:	2101      	movs	r1, #1
 8005c9a:	6838      	ldr	r0, [r7, #0]
 8005c9c:	f000 fa7c 	bl	8006198 <prvAddCurrentTaskToDelayedList>
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20004468 	.word	0x20004468

08005cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7fe fb32 	bl	8004346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68b8      	ldr	r0, [r7, #8]
 8005cf2:	f000 fa51 	bl	8006198 <prvAddCurrentTaskToDelayedList>
	}
 8005cf6:	bf00      	nop
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20004468 	.word	0x20004468

08005d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	60fb      	str	r3, [r7, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	3318      	adds	r3, #24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fb63 	bl	8004400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3a:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <xTaskRemoveFromEventList+0xb0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d11d      	bne.n	8005d7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fb5a 	bl	8004400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d50:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <xTaskRemoveFromEventList+0xb4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d903      	bls.n	8005d60 <xTaskRemoveFromEventList+0x5c>
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <xTaskRemoveFromEventList+0xb4>)
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <xTaskRemoveFromEventList+0xb8>)
 8005d6e:	441a      	add	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f7fe fae5 	bl	8004346 <vListInsertEnd>
 8005d7c:	e005      	b.n	8005d8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3318      	adds	r3, #24
 8005d82:	4619      	mov	r1, r3
 8005d84:	480e      	ldr	r0, [pc, #56]	; (8005dc0 <xTaskRemoveFromEventList+0xbc>)
 8005d86:	f7fe fade 	bl	8004346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <xTaskRemoveFromEventList+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d905      	bls.n	8005da4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <xTaskRemoveFromEventList+0xc4>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e001      	b.n	8005da8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005da8:	697b      	ldr	r3, [r7, #20]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20004964 	.word	0x20004964
 8005db8:	20004944 	.word	0x20004944
 8005dbc:	2000446c 	.word	0x2000446c
 8005dc0:	200048fc 	.word	0x200048fc
 8005dc4:	20004468 	.word	0x20004468
 8005dc8:	20004950 	.word	0x20004950

08005dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <vTaskInternalSetTimeOutState+0x24>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <vTaskInternalSetTimeOutState+0x28>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	605a      	str	r2, [r3, #4]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	20004954 	.word	0x20004954
 8005df4:	20004940 	.word	0x20004940

08005df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	613b      	str	r3, [r7, #16]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	60fb      	str	r3, [r7, #12]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e3a:	f7fe fc3b 	bl	80046b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <xTaskCheckForTimeOut+0xbc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d102      	bne.n	8005e5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	e023      	b.n	8005ea6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <xTaskCheckForTimeOut+0xc0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d007      	beq.n	8005e7a <xTaskCheckForTimeOut+0x82>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e015      	b.n	8005ea6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d20b      	bcs.n	8005e9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff9b 	bl	8005dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e004      	b.n	8005ea6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ea6:	f7fe fc35 	bl	8004714 <vPortExitCritical>

	return xReturn;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3720      	adds	r7, #32
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20004940 	.word	0x20004940
 8005eb8:	20004954 	.word	0x20004954

08005ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ec0:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <vTaskMissedYield+0x14>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20004950 	.word	0x20004950

08005ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005edc:	f000 f852 	bl	8005f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <prvIdleTask+0x28>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d9f9      	bls.n	8005edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <prvIdleTask+0x2c>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ef8:	e7f0      	b.n	8005edc <prvIdleTask+0x8>
 8005efa:	bf00      	nop
 8005efc:	2000446c 	.word	0x2000446c
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	e00c      	b.n	8005f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <prvInitialiseTaskLists+0x60>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe f9e4 	bl	80042ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3301      	adds	r3, #1
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b37      	cmp	r3, #55	; 0x37
 8005f2e:	d9ef      	bls.n	8005f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f30:	480d      	ldr	r0, [pc, #52]	; (8005f68 <prvInitialiseTaskLists+0x64>)
 8005f32:	f7fe f9db 	bl	80042ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f36:	480d      	ldr	r0, [pc, #52]	; (8005f6c <prvInitialiseTaskLists+0x68>)
 8005f38:	f7fe f9d8 	bl	80042ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f3c:	480c      	ldr	r0, [pc, #48]	; (8005f70 <prvInitialiseTaskLists+0x6c>)
 8005f3e:	f7fe f9d5 	bl	80042ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f42:	480c      	ldr	r0, [pc, #48]	; (8005f74 <prvInitialiseTaskLists+0x70>)
 8005f44:	f7fe f9d2 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f48:	480b      	ldr	r0, [pc, #44]	; (8005f78 <prvInitialiseTaskLists+0x74>)
 8005f4a:	f7fe f9cf 	bl	80042ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <prvInitialiseTaskLists+0x78>)
 8005f50:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <prvInitialiseTaskLists+0x64>)
 8005f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvInitialiseTaskLists+0x7c>)
 8005f56:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <prvInitialiseTaskLists+0x68>)
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000446c 	.word	0x2000446c
 8005f68:	200048cc 	.word	0x200048cc
 8005f6c:	200048e0 	.word	0x200048e0
 8005f70:	200048fc 	.word	0x200048fc
 8005f74:	20004910 	.word	0x20004910
 8005f78:	20004928 	.word	0x20004928
 8005f7c:	200048f4 	.word	0x200048f4
 8005f80:	200048f8 	.word	0x200048f8

08005f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f8a:	e019      	b.n	8005fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f8c:	f7fe fb92 	bl	80046b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f90:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <prvCheckTasksWaitingTermination+0x50>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fa2f 	bl	8004400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <prvCheckTasksWaitingTermination+0x54>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4a0b      	ldr	r2, [pc, #44]	; (8005fd8 <prvCheckTasksWaitingTermination+0x54>)
 8005faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <prvCheckTasksWaitingTermination+0x58>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <prvCheckTasksWaitingTermination+0x58>)
 8005fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fb6:	f7fe fbad 	bl	8004714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f810 	bl	8005fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <prvCheckTasksWaitingTermination+0x58>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e1      	bne.n	8005f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20004910 	.word	0x20004910
 8005fd8:	2000493c 	.word	0x2000493c
 8005fdc:	20004924 	.word	0x20004924

08005fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe f85a 	bl	80040b0 <vPortFree>
				vPortFree( pxTCB );
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fe f857 	bl	80040b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006002:	e018      	b.n	8006036 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800600a:	2b01      	cmp	r3, #1
 800600c:	d103      	bne.n	8006016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fe f84e 	bl	80040b0 <vPortFree>
	}
 8006014:	e00f      	b.n	8006036 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800601c:	2b02      	cmp	r3, #2
 800601e:	d00a      	beq.n	8006036 <prvDeleteTCB+0x56>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <prvDeleteTCB+0x54>
	}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <prvResetNextTaskUnblockTime+0x38>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <prvResetNextTaskUnblockTime+0x3c>)
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006058:	e008      	b.n	800606c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <prvResetNextTaskUnblockTime+0x38>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a04      	ldr	r2, [pc, #16]	; (800607c <prvResetNextTaskUnblockTime+0x3c>)
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	200048f4 	.word	0x200048f4
 800607c:	2000495c 	.word	0x2000495c

08006080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <xTaskGetSchedulerState+0x34>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800608e:	2301      	movs	r3, #1
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e008      	b.n	80060a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006094:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <xTaskGetSchedulerState+0x38>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800609c:	2302      	movs	r3, #2
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	e001      	b.n	80060a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060a6:	687b      	ldr	r3, [r7, #4]
	}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20004948 	.word	0x20004948
 80060b8:	20004964 	.word	0x20004964

080060bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d056      	beq.n	8006180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <xTaskPriorityDisinherit+0xd0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d00a      	beq.n	80060f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	60fb      	str	r3, [r7, #12]
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	60bb      	str	r3, [r7, #8]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	1e5a      	subs	r2, r3, #1
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	429a      	cmp	r2, r3
 8006124:	d02c      	beq.n	8006180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612a:	2b00      	cmp	r3, #0
 800612c:	d128      	bne.n	8006180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe f964 	bl	8004400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <xTaskPriorityDisinherit+0xd4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d903      	bls.n	8006160 <xTaskPriorityDisinherit+0xa4>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <xTaskPriorityDisinherit+0xd4>)
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a09      	ldr	r2, [pc, #36]	; (8006194 <xTaskPriorityDisinherit+0xd8>)
 800616e:	441a      	add	r2, r3
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7fe f8e5 	bl	8004346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006180:	697b      	ldr	r3, [r7, #20]
	}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20004468 	.word	0x20004468
 8006190:	20004944 	.word	0x20004944
 8006194:	2000446c 	.word	0x2000446c

08006198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061a2:	4b21      	ldr	r3, [pc, #132]	; (8006228 <prvAddCurrentTaskToDelayedList+0x90>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a8:	4b20      	ldr	r3, [pc, #128]	; (800622c <prvAddCurrentTaskToDelayedList+0x94>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe f926 	bl	8004400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d10a      	bne.n	80061d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c2:	4b1a      	ldr	r3, [pc, #104]	; (800622c <prvAddCurrentTaskToDelayedList+0x94>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4819      	ldr	r0, [pc, #100]	; (8006230 <prvAddCurrentTaskToDelayedList+0x98>)
 80061cc:	f7fe f8bb 	bl	8004346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061d0:	e026      	b.n	8006220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4413      	add	r3, r2
 80061d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061da:	4b14      	ldr	r3, [pc, #80]	; (800622c <prvAddCurrentTaskToDelayedList+0x94>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d209      	bcs.n	80061fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ea:	4b12      	ldr	r3, [pc, #72]	; (8006234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <prvAddCurrentTaskToDelayedList+0x94>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f7fe f8c9 	bl	800438e <vListInsert>
}
 80061fc:	e010      	b.n	8006220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fe:	4b0e      	ldr	r3, [pc, #56]	; (8006238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <prvAddCurrentTaskToDelayedList+0x94>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f7fe f8bf 	bl	800438e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	d202      	bcs.n	8006220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <prvAddCurrentTaskToDelayedList+0xa4>)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6013      	str	r3, [r2, #0]
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20004940 	.word	0x20004940
 800622c:	20004468 	.word	0x20004468
 8006230:	20004928 	.word	0x20004928
 8006234:	200048f8 	.word	0x200048f8
 8006238:	200048f4 	.word	0x200048f4
 800623c:	2000495c 	.word	0x2000495c

08006240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800624a:	f000 fb07 	bl	800685c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <xTimerCreateTimerTask+0x80>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d021      	beq.n	800629a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800625e:	1d3a      	adds	r2, r7, #4
 8006260:	f107 0108 	add.w	r1, r7, #8
 8006264:	f107 030c 	add.w	r3, r7, #12
 8006268:	4618      	mov	r0, r3
 800626a:	f7fd fe3b 	bl	8003ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	9202      	str	r2, [sp, #8]
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	2302      	movs	r3, #2
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2300      	movs	r3, #0
 800627e:	460a      	mov	r2, r1
 8006280:	4910      	ldr	r1, [pc, #64]	; (80062c4 <xTimerCreateTimerTask+0x84>)
 8006282:	4811      	ldr	r0, [pc, #68]	; (80062c8 <xTimerCreateTimerTask+0x88>)
 8006284:	f7ff f8de 	bl	8005444 <xTaskCreateStatic>
 8006288:	4603      	mov	r3, r0
 800628a:	4a10      	ldr	r2, [pc, #64]	; (80062cc <xTimerCreateTimerTask+0x8c>)
 800628c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <xTimerCreateTimerTask+0x8c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006296:	2301      	movs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062b6:	697b      	ldr	r3, [r7, #20]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20004998 	.word	0x20004998
 80062c4:	08007bd0 	.word	0x08007bd0
 80062c8:	08006405 	.word	0x08006405
 80062cc:	2000499c 	.word	0x2000499c

080062d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	623b      	str	r3, [r7, #32]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062fe:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <xTimerGenericCommand+0x98>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02a      	beq.n	800635c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b05      	cmp	r3, #5
 8006316:	dc18      	bgt.n	800634a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006318:	f7ff feb2 	bl	8006080 <xTaskGetSchedulerState>
 800631c:	4603      	mov	r3, r0
 800631e:	2b02      	cmp	r3, #2
 8006320:	d109      	bne.n	8006336 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <xTimerGenericCommand+0x98>)
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	f107 0110 	add.w	r1, r7, #16
 800632a:	2300      	movs	r3, #0
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	f7fe fc21 	bl	8004b74 <xQueueGenericSend>
 8006332:	6278      	str	r0, [r7, #36]	; 0x24
 8006334:	e012      	b.n	800635c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <xTimerGenericCommand+0x98>)
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	f107 0110 	add.w	r1, r7, #16
 800633e:	2300      	movs	r3, #0
 8006340:	2200      	movs	r2, #0
 8006342:	f7fe fc17 	bl	8004b74 <xQueueGenericSend>
 8006346:	6278      	str	r0, [r7, #36]	; 0x24
 8006348:	e008      	b.n	800635c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <xTimerGenericCommand+0x98>)
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	f107 0110 	add.w	r1, r7, #16
 8006352:	2300      	movs	r3, #0
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	f7fe fd0b 	bl	8004d70 <xQueueGenericSendFromISR>
 800635a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800635e:	4618      	mov	r0, r3
 8006360:	3728      	adds	r7, #40	; 0x28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20004998 	.word	0x20004998

0800636c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006376:	4b22      	ldr	r3, [pc, #136]	; (8006400 <prvProcessExpiredTimer+0x94>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3304      	adds	r3, #4
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe f83b 	bl	8004400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d022      	beq.n	80063de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	18d1      	adds	r1, r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	6978      	ldr	r0, [r7, #20]
 80063a6:	f000 f8d1 	bl	800654c <prvInsertTimerInActiveList>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01f      	beq.n	80063f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063b0:	2300      	movs	r3, #0
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	2100      	movs	r1, #0
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f7ff ff88 	bl	80062d0 <xTimerGenericCommand>
 80063c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d113      	bne.n	80063f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	60fb      	str	r3, [r7, #12]
}
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e4:	f023 0301 	bic.w	r3, r3, #1
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	6978      	ldr	r0, [r7, #20]
 80063f6:	4798      	blx	r3
}
 80063f8:	bf00      	nop
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20004990 	.word	0x20004990

08006404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800640c:	f107 0308 	add.w	r3, r7, #8
 8006410:	4618      	mov	r0, r3
 8006412:	f000 f857 	bl	80064c4 <prvGetNextExpireTime>
 8006416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4619      	mov	r1, r3
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f803 	bl	8006428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006422:	f000 f8d5 	bl	80065d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006426:	e7f1      	b.n	800640c <prvTimerTask+0x8>

08006428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006432:	f7ff fa43 	bl	80058bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f866 	bl	800650c <prvSampleTimeNow>
 8006440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d130      	bne.n	80064aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <prvProcessTimerOrBlockTask+0x3c>
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	429a      	cmp	r2, r3
 8006454:	d806      	bhi.n	8006464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006456:	f7ff fa3f 	bl	80058d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ff85 	bl	800636c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006462:	e024      	b.n	80064ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <prvProcessTimerOrBlockTask+0x90>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <prvProcessTimerOrBlockTask+0x50>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <prvProcessTimerOrBlockTask+0x52>
 8006478:	2300      	movs	r3, #0
 800647a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <prvProcessTimerOrBlockTask+0x94>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	f7fe ffa7 	bl	80053dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800648e:	f7ff fa23 	bl	80058d8 <xTaskResumeAll>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <prvProcessTimerOrBlockTask+0x98>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
}
 80064a8:	e001      	b.n	80064ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064aa:	f7ff fa15 	bl	80058d8 <xTaskResumeAll>
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20004994 	.word	0x20004994
 80064bc:	20004998 	.word	0x20004998
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064cc:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <prvGetNextExpireTime+0x44>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <prvGetNextExpireTime+0x16>
 80064d6:	2201      	movs	r2, #1
 80064d8:	e000      	b.n	80064dc <prvGetNextExpireTime+0x18>
 80064da:	2200      	movs	r2, #0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064e8:	4b07      	ldr	r3, [pc, #28]	; (8006508 <prvGetNextExpireTime+0x44>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e001      	b.n	80064f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20004990 	.word	0x20004990

0800650c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006514:	f7ff fa7e 	bl	8005a14 <xTaskGetTickCount>
 8006518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800651a:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <prvSampleTimeNow+0x3c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	429a      	cmp	r2, r3
 8006522:	d205      	bcs.n	8006530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006524:	f000 f936 	bl	8006794 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e002      	b.n	8006536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006536:	4a04      	ldr	r2, [pc, #16]	; (8006548 <prvSampleTimeNow+0x3c>)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200049a0 	.word	0x200049a0

0800654c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d812      	bhi.n	8006598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e01b      	b.n	80065be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <prvInsertTimerInActiveList+0x7c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3304      	adds	r3, #4
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f7fd fefc 	bl	800438e <vListInsert>
 8006596:	e012      	b.n	80065be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d206      	bcs.n	80065ae <prvInsertTimerInActiveList+0x62>
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e007      	b.n	80065be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <prvInsertTimerInActiveList+0x80>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fd fee8 	bl	800438e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065be:	697b      	ldr	r3, [r7, #20]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20004994 	.word	0x20004994
 80065cc:	20004990 	.word	0x20004990

080065d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08e      	sub	sp, #56	; 0x38
 80065d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065d6:	e0ca      	b.n	800676e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	da18      	bge.n	8006610 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	3304      	adds	r3, #4
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61fb      	str	r3, [r7, #28]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006606:	6850      	ldr	r0, [r2, #4]
 8006608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800660a:	6892      	ldr	r2, [r2, #8]
 800660c:	4611      	mov	r1, r2
 800660e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f2c0 80aa 	blt.w	800676c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fd fee9 	bl	8004400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800662e:	463b      	mov	r3, r7
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff ff6b 	bl	800650c <prvSampleTimeNow>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b09      	cmp	r3, #9
 800663c:	f200 8097 	bhi.w	800676e <prvProcessReceivedCommands+0x19e>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <prvProcessReceivedCommands+0x78>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	08006671 	.word	0x08006671
 800664c:	08006671 	.word	0x08006671
 8006650:	08006671 	.word	0x08006671
 8006654:	080066e5 	.word	0x080066e5
 8006658:	080066f9 	.word	0x080066f9
 800665c:	08006743 	.word	0x08006743
 8006660:	08006671 	.word	0x08006671
 8006664:	08006671 	.word	0x08006671
 8006668:	080066e5 	.word	0x080066e5
 800666c:	080066f9 	.word	0x080066f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	18d1      	adds	r1, r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006690:	f7ff ff5c 	bl	800654c <prvInsertTimerInActiveList>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d069      	beq.n	800676e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d05e      	beq.n	800676e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	441a      	add	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2300      	movs	r3, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c2:	f7ff fe05 	bl	80062d0 <xTimerGenericCommand>
 80066c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d14f      	bne.n	800676e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	61bb      	str	r3, [r7, #24]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066f6:	e03a      	b.n	800676e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	617b      	str	r3, [r7, #20]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	18d1      	adds	r1, r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673c:	f7ff ff06 	bl	800654c <prvInsertTimerInActiveList>
					break;
 8006740:	e015      	b.n	800676e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006752:	f7fd fcad 	bl	80040b0 <vPortFree>
 8006756:	e00a      	b.n	800676e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	b2da      	uxtb	r2, r3
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800676a:	e000      	b.n	800676e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800676c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <prvProcessReceivedCommands+0x1c0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	1d39      	adds	r1, r7, #4
 8006774:	2200      	movs	r2, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fb96 	bl	8004ea8 <xQueueReceive>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	f47f af2a 	bne.w	80065d8 <prvProcessReceivedCommands+0x8>
	}
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	3730      	adds	r7, #48	; 0x30
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20004998 	.word	0x20004998

08006794 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800679a:	e048      	b.n	800682e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800679c:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <prvSwitchTimerLists+0xc0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <prvSwitchTimerLists+0xc0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fd fe23 	bl	8004400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d02e      	beq.n	800682e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d90e      	bls.n	8006800 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ee:	4b19      	ldr	r3, [pc, #100]	; (8006854 <prvSwitchTimerLists+0xc0>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7fd fdc8 	bl	800438e <vListInsert>
 80067fe:	e016      	b.n	800682e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006800:	2300      	movs	r3, #0
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	2300      	movs	r3, #0
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	2100      	movs	r1, #0
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff fd60 	bl	80062d0 <xTimerGenericCommand>
 8006810:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	603b      	str	r3, [r7, #0]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <prvSwitchTimerLists+0xc0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1b1      	bne.n	800679c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <prvSwitchTimerLists+0xc0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <prvSwitchTimerLists+0xc4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a04      	ldr	r2, [pc, #16]	; (8006854 <prvSwitchTimerLists+0xc0>)
 8006844:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006846:	4a04      	ldr	r2, [pc, #16]	; (8006858 <prvSwitchTimerLists+0xc4>)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	6013      	str	r3, [r2, #0]
}
 800684c:	bf00      	nop
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20004990 	.word	0x20004990
 8006858:	20004994 	.word	0x20004994

0800685c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006862:	f7fd ff27 	bl	80046b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <prvCheckForValidListAndQueue+0x60>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d120      	bne.n	80068b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800686e:	4814      	ldr	r0, [pc, #80]	; (80068c0 <prvCheckForValidListAndQueue+0x64>)
 8006870:	f7fd fd3c 	bl	80042ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006874:	4813      	ldr	r0, [pc, #76]	; (80068c4 <prvCheckForValidListAndQueue+0x68>)
 8006876:	f7fd fd39 	bl	80042ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <prvCheckForValidListAndQueue+0x6c>)
 800687c:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <prvCheckForValidListAndQueue+0x64>)
 800687e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006880:	4b12      	ldr	r3, [pc, #72]	; (80068cc <prvCheckForValidListAndQueue+0x70>)
 8006882:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <prvCheckForValidListAndQueue+0x68>)
 8006884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006886:	2300      	movs	r3, #0
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <prvCheckForValidListAndQueue+0x74>)
 800688c:	4a11      	ldr	r2, [pc, #68]	; (80068d4 <prvCheckForValidListAndQueue+0x78>)
 800688e:	2110      	movs	r1, #16
 8006890:	200a      	movs	r0, #10
 8006892:	f7fe f899 	bl	80049c8 <xQueueGenericCreateStatic>
 8006896:	4603      	mov	r3, r0
 8006898:	4a08      	ldr	r2, [pc, #32]	; (80068bc <prvCheckForValidListAndQueue+0x60>)
 800689a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <prvCheckForValidListAndQueue+0x60>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <prvCheckForValidListAndQueue+0x60>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	490b      	ldr	r1, [pc, #44]	; (80068d8 <prvCheckForValidListAndQueue+0x7c>)
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fd6c 	bl	8005388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068b0:	f7fd ff30 	bl	8004714 <vPortExitCritical>
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20004998 	.word	0x20004998
 80068c0:	20004968 	.word	0x20004968
 80068c4:	2000497c 	.word	0x2000497c
 80068c8:	20004990 	.word	0x20004990
 80068cc:	20004994 	.word	0x20004994
 80068d0:	20004a44 	.word	0x20004a44
 80068d4:	200049a4 	.word	0x200049a4
 80068d8:	08007bd8 	.word	0x08007bd8

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000014 	.word	0x20000014

080068e8 <__sflush_r>:
 80068e8:	898a      	ldrh	r2, [r1, #12]
 80068ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	4605      	mov	r5, r0
 80068f0:	0710      	lsls	r0, r2, #28
 80068f2:	460c      	mov	r4, r1
 80068f4:	d458      	bmi.n	80069a8 <__sflush_r+0xc0>
 80068f6:	684b      	ldr	r3, [r1, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc05      	bgt.n	8006908 <__sflush_r+0x20>
 80068fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dc02      	bgt.n	8006908 <__sflush_r+0x20>
 8006902:	2000      	movs	r0, #0
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800690a:	2e00      	cmp	r6, #0
 800690c:	d0f9      	beq.n	8006902 <__sflush_r+0x1a>
 800690e:	2300      	movs	r3, #0
 8006910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006914:	682f      	ldr	r7, [r5, #0]
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	d032      	beq.n	8006980 <__sflush_r+0x98>
 800691a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	075a      	lsls	r2, r3, #29
 8006920:	d505      	bpl.n	800692e <__sflush_r+0x46>
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	1ac0      	subs	r0, r0, r3
 8006926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006928:	b10b      	cbz	r3, 800692e <__sflush_r+0x46>
 800692a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800692c:	1ac0      	subs	r0, r0, r3
 800692e:	2300      	movs	r3, #0
 8006930:	4602      	mov	r2, r0
 8006932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006934:	6a21      	ldr	r1, [r4, #32]
 8006936:	4628      	mov	r0, r5
 8006938:	47b0      	blx	r6
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	d106      	bne.n	800694e <__sflush_r+0x66>
 8006940:	6829      	ldr	r1, [r5, #0]
 8006942:	291d      	cmp	r1, #29
 8006944:	d82c      	bhi.n	80069a0 <__sflush_r+0xb8>
 8006946:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <__sflush_r+0x108>)
 8006948:	40ca      	lsrs	r2, r1
 800694a:	07d6      	lsls	r6, r2, #31
 800694c:	d528      	bpl.n	80069a0 <__sflush_r+0xb8>
 800694e:	2200      	movs	r2, #0
 8006950:	6062      	str	r2, [r4, #4]
 8006952:	04d9      	lsls	r1, r3, #19
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	6022      	str	r2, [r4, #0]
 8006958:	d504      	bpl.n	8006964 <__sflush_r+0x7c>
 800695a:	1c42      	adds	r2, r0, #1
 800695c:	d101      	bne.n	8006962 <__sflush_r+0x7a>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	b903      	cbnz	r3, 8006964 <__sflush_r+0x7c>
 8006962:	6560      	str	r0, [r4, #84]	; 0x54
 8006964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006966:	602f      	str	r7, [r5, #0]
 8006968:	2900      	cmp	r1, #0
 800696a:	d0ca      	beq.n	8006902 <__sflush_r+0x1a>
 800696c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006970:	4299      	cmp	r1, r3
 8006972:	d002      	beq.n	800697a <__sflush_r+0x92>
 8006974:	4628      	mov	r0, r5
 8006976:	f000 f9bf 	bl	8006cf8 <_free_r>
 800697a:	2000      	movs	r0, #0
 800697c:	6360      	str	r0, [r4, #52]	; 0x34
 800697e:	e7c1      	b.n	8006904 <__sflush_r+0x1c>
 8006980:	6a21      	ldr	r1, [r4, #32]
 8006982:	2301      	movs	r3, #1
 8006984:	4628      	mov	r0, r5
 8006986:	47b0      	blx	r6
 8006988:	1c41      	adds	r1, r0, #1
 800698a:	d1c7      	bne.n	800691c <__sflush_r+0x34>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0c4      	beq.n	800691c <__sflush_r+0x34>
 8006992:	2b1d      	cmp	r3, #29
 8006994:	d001      	beq.n	800699a <__sflush_r+0xb2>
 8006996:	2b16      	cmp	r3, #22
 8006998:	d101      	bne.n	800699e <__sflush_r+0xb6>
 800699a:	602f      	str	r7, [r5, #0]
 800699c:	e7b1      	b.n	8006902 <__sflush_r+0x1a>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	e7ad      	b.n	8006904 <__sflush_r+0x1c>
 80069a8:	690f      	ldr	r7, [r1, #16]
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	d0a9      	beq.n	8006902 <__sflush_r+0x1a>
 80069ae:	0793      	lsls	r3, r2, #30
 80069b0:	680e      	ldr	r6, [r1, #0]
 80069b2:	bf08      	it	eq
 80069b4:	694b      	ldreq	r3, [r1, #20]
 80069b6:	600f      	str	r7, [r1, #0]
 80069b8:	bf18      	it	ne
 80069ba:	2300      	movne	r3, #0
 80069bc:	eba6 0807 	sub.w	r8, r6, r7
 80069c0:	608b      	str	r3, [r1, #8]
 80069c2:	f1b8 0f00 	cmp.w	r8, #0
 80069c6:	dd9c      	ble.n	8006902 <__sflush_r+0x1a>
 80069c8:	6a21      	ldr	r1, [r4, #32]
 80069ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069cc:	4643      	mov	r3, r8
 80069ce:	463a      	mov	r2, r7
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b0      	blx	r6
 80069d4:	2800      	cmp	r0, #0
 80069d6:	dc06      	bgt.n	80069e6 <__sflush_r+0xfe>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e78e      	b.n	8006904 <__sflush_r+0x1c>
 80069e6:	4407      	add	r7, r0
 80069e8:	eba8 0800 	sub.w	r8, r8, r0
 80069ec:	e7e9      	b.n	80069c2 <__sflush_r+0xda>
 80069ee:	bf00      	nop
 80069f0:	20400001 	.word	0x20400001

080069f4 <_fflush_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	690b      	ldr	r3, [r1, #16]
 80069f8:	4605      	mov	r5, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b913      	cbnz	r3, 8006a04 <_fflush_r+0x10>
 80069fe:	2500      	movs	r5, #0
 8006a00:	4628      	mov	r0, r5
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	b118      	cbz	r0, 8006a0e <_fflush_r+0x1a>
 8006a06:	6983      	ldr	r3, [r0, #24]
 8006a08:	b90b      	cbnz	r3, 8006a0e <_fflush_r+0x1a>
 8006a0a:	f000 f899 	bl	8006b40 <__sinit>
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <_fflush_r+0x6c>)
 8006a10:	429c      	cmp	r4, r3
 8006a12:	d11b      	bne.n	8006a4c <_fflush_r+0x58>
 8006a14:	686c      	ldr	r4, [r5, #4]
 8006a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ef      	beq.n	80069fe <_fflush_r+0xa>
 8006a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a20:	07d0      	lsls	r0, r2, #31
 8006a22:	d404      	bmi.n	8006a2e <_fflush_r+0x3a>
 8006a24:	0599      	lsls	r1, r3, #22
 8006a26:	d402      	bmi.n	8006a2e <_fflush_r+0x3a>
 8006a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a2a:	f000 f94c 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 8006a2e:	4628      	mov	r0, r5
 8006a30:	4621      	mov	r1, r4
 8006a32:	f7ff ff59 	bl	80068e8 <__sflush_r>
 8006a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a38:	07da      	lsls	r2, r3, #31
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	d4e0      	bmi.n	8006a00 <_fflush_r+0xc>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	059b      	lsls	r3, r3, #22
 8006a42:	d4dd      	bmi.n	8006a00 <_fflush_r+0xc>
 8006a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a46:	f000 f93f 	bl	8006cc8 <__retarget_lock_release_recursive>
 8006a4a:	e7d9      	b.n	8006a00 <_fflush_r+0xc>
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <_fflush_r+0x70>)
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	d101      	bne.n	8006a56 <_fflush_r+0x62>
 8006a52:	68ac      	ldr	r4, [r5, #8]
 8006a54:	e7df      	b.n	8006a16 <_fflush_r+0x22>
 8006a56:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <_fflush_r+0x74>)
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	bf08      	it	eq
 8006a5c:	68ec      	ldreq	r4, [r5, #12]
 8006a5e:	e7da      	b.n	8006a16 <_fflush_r+0x22>
 8006a60:	08007e10 	.word	0x08007e10
 8006a64:	08007e30 	.word	0x08007e30
 8006a68:	08007df0 	.word	0x08007df0

08006a6c <fflush>:
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	b920      	cbnz	r0, 8006a7a <fflush+0xe>
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <fflush+0x18>)
 8006a72:	4905      	ldr	r1, [pc, #20]	; (8006a88 <fflush+0x1c>)
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	f000 b8e1 	b.w	8006c3c <_fwalk_reent>
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <fflush+0x20>)
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	f7ff bfb9 	b.w	80069f4 <_fflush_r>
 8006a82:	bf00      	nop
 8006a84:	08007e50 	.word	0x08007e50
 8006a88:	080069f5 	.word	0x080069f5
 8006a8c:	20000014 	.word	0x20000014

08006a90 <std>:
 8006a90:	2300      	movs	r3, #0
 8006a92:	b510      	push	{r4, lr}
 8006a94:	4604      	mov	r4, r0
 8006a96:	e9c0 3300 	strd	r3, r3, [r0]
 8006a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a9e:	6083      	str	r3, [r0, #8]
 8006aa0:	8181      	strh	r1, [r0, #12]
 8006aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8006aa4:	81c2      	strh	r2, [r0, #14]
 8006aa6:	6183      	str	r3, [r0, #24]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	2208      	movs	r2, #8
 8006aac:	305c      	adds	r0, #92	; 0x5c
 8006aae:	f000 f91a 	bl	8006ce6 <memset>
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x38>)
 8006ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x3c>)
 8006ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x40>)
 8006abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <std+0x44>)
 8006ac0:	6224      	str	r4, [r4, #32]
 8006ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08007021 	.word	0x08007021
 8006acc:	08007043 	.word	0x08007043
 8006ad0:	0800707b 	.word	0x0800707b
 8006ad4:	0800709f 	.word	0x0800709f

08006ad8 <_cleanup_r>:
 8006ad8:	4901      	ldr	r1, [pc, #4]	; (8006ae0 <_cleanup_r+0x8>)
 8006ada:	f000 b8af 	b.w	8006c3c <_fwalk_reent>
 8006ade:	bf00      	nop
 8006ae0:	080069f5 	.word	0x080069f5

08006ae4 <__sfmoreglue>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	2268      	movs	r2, #104	; 0x68
 8006ae8:	1e4d      	subs	r5, r1, #1
 8006aea:	4355      	muls	r5, r2
 8006aec:	460e      	mov	r6, r1
 8006aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006af2:	f000 f96d 	bl	8006dd0 <_malloc_r>
 8006af6:	4604      	mov	r4, r0
 8006af8:	b140      	cbz	r0, 8006b0c <__sfmoreglue+0x28>
 8006afa:	2100      	movs	r1, #0
 8006afc:	e9c0 1600 	strd	r1, r6, [r0]
 8006b00:	300c      	adds	r0, #12
 8006b02:	60a0      	str	r0, [r4, #8]
 8006b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b08:	f000 f8ed 	bl	8006ce6 <memset>
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}

08006b10 <__sfp_lock_acquire>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__sfp_lock_acquire+0x8>)
 8006b12:	f000 b8d8 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8006b16:	bf00      	nop
 8006b18:	20004a95 	.word	0x20004a95

08006b1c <__sfp_lock_release>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__sfp_lock_release+0x8>)
 8006b1e:	f000 b8d3 	b.w	8006cc8 <__retarget_lock_release_recursive>
 8006b22:	bf00      	nop
 8006b24:	20004a95 	.word	0x20004a95

08006b28 <__sinit_lock_acquire>:
 8006b28:	4801      	ldr	r0, [pc, #4]	; (8006b30 <__sinit_lock_acquire+0x8>)
 8006b2a:	f000 b8cc 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8006b2e:	bf00      	nop
 8006b30:	20004a96 	.word	0x20004a96

08006b34 <__sinit_lock_release>:
 8006b34:	4801      	ldr	r0, [pc, #4]	; (8006b3c <__sinit_lock_release+0x8>)
 8006b36:	f000 b8c7 	b.w	8006cc8 <__retarget_lock_release_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	20004a96 	.word	0x20004a96

08006b40 <__sinit>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	4604      	mov	r4, r0
 8006b44:	f7ff fff0 	bl	8006b28 <__sinit_lock_acquire>
 8006b48:	69a3      	ldr	r3, [r4, #24]
 8006b4a:	b11b      	cbz	r3, 8006b54 <__sinit+0x14>
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b50:	f7ff bff0 	b.w	8006b34 <__sinit_lock_release>
 8006b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b58:	6523      	str	r3, [r4, #80]	; 0x50
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <__sinit+0x68>)
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <__sinit+0x6c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	bf04      	itt	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	61a3      	streq	r3, [r4, #24]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f820 	bl	8006bb0 <__sfp>
 8006b70:	6060      	str	r0, [r4, #4]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f81c 	bl	8006bb0 <__sfp>
 8006b78:	60a0      	str	r0, [r4, #8]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 f818 	bl	8006bb0 <__sfp>
 8006b80:	2200      	movs	r2, #0
 8006b82:	60e0      	str	r0, [r4, #12]
 8006b84:	2104      	movs	r1, #4
 8006b86:	6860      	ldr	r0, [r4, #4]
 8006b88:	f7ff ff82 	bl	8006a90 <std>
 8006b8c:	68a0      	ldr	r0, [r4, #8]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2109      	movs	r1, #9
 8006b92:	f7ff ff7d 	bl	8006a90 <std>
 8006b96:	68e0      	ldr	r0, [r4, #12]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	2112      	movs	r1, #18
 8006b9c:	f7ff ff78 	bl	8006a90 <std>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	61a3      	str	r3, [r4, #24]
 8006ba4:	e7d2      	b.n	8006b4c <__sinit+0xc>
 8006ba6:	bf00      	nop
 8006ba8:	08007e50 	.word	0x08007e50
 8006bac:	08006ad9 	.word	0x08006ad9

08006bb0 <__sfp>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	4607      	mov	r7, r0
 8006bb4:	f7ff ffac 	bl	8006b10 <__sfp_lock_acquire>
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <__sfp+0x84>)
 8006bba:	681e      	ldr	r6, [r3, #0]
 8006bbc:	69b3      	ldr	r3, [r6, #24]
 8006bbe:	b913      	cbnz	r3, 8006bc6 <__sfp+0x16>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff ffbd 	bl	8006b40 <__sinit>
 8006bc6:	3648      	adds	r6, #72	; 0x48
 8006bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	d503      	bpl.n	8006bd8 <__sfp+0x28>
 8006bd0:	6833      	ldr	r3, [r6, #0]
 8006bd2:	b30b      	cbz	r3, 8006c18 <__sfp+0x68>
 8006bd4:	6836      	ldr	r6, [r6, #0]
 8006bd6:	e7f7      	b.n	8006bc8 <__sfp+0x18>
 8006bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bdc:	b9d5      	cbnz	r5, 8006c14 <__sfp+0x64>
 8006bde:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <__sfp+0x88>)
 8006be0:	60e3      	str	r3, [r4, #12]
 8006be2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006be6:	6665      	str	r5, [r4, #100]	; 0x64
 8006be8:	f000 f86c 	bl	8006cc4 <__retarget_lock_init_recursive>
 8006bec:	f7ff ff96 	bl	8006b1c <__sfp_lock_release>
 8006bf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf8:	6025      	str	r5, [r4, #0]
 8006bfa:	61a5      	str	r5, [r4, #24]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c04:	f000 f86f 	bl	8006ce6 <memset>
 8006c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c10:	4620      	mov	r0, r4
 8006c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c14:	3468      	adds	r4, #104	; 0x68
 8006c16:	e7d9      	b.n	8006bcc <__sfp+0x1c>
 8006c18:	2104      	movs	r1, #4
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f7ff ff62 	bl	8006ae4 <__sfmoreglue>
 8006c20:	4604      	mov	r4, r0
 8006c22:	6030      	str	r0, [r6, #0]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d1d5      	bne.n	8006bd4 <__sfp+0x24>
 8006c28:	f7ff ff78 	bl	8006b1c <__sfp_lock_release>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	e7ee      	b.n	8006c10 <__sfp+0x60>
 8006c32:	bf00      	nop
 8006c34:	08007e50 	.word	0x08007e50
 8006c38:	ffff0001 	.word	0xffff0001

08006c3c <_fwalk_reent>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4606      	mov	r6, r0
 8006c42:	4688      	mov	r8, r1
 8006c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c48:	2700      	movs	r7, #0
 8006c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c52:	d505      	bpl.n	8006c60 <_fwalk_reent+0x24>
 8006c54:	6824      	ldr	r4, [r4, #0]
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d1f7      	bne.n	8006c4a <_fwalk_reent+0xe>
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c60:	89ab      	ldrh	r3, [r5, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d907      	bls.n	8006c76 <_fwalk_reent+0x3a>
 8006c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	d003      	beq.n	8006c76 <_fwalk_reent+0x3a>
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4630      	mov	r0, r6
 8006c72:	47c0      	blx	r8
 8006c74:	4307      	orrs	r7, r0
 8006c76:	3568      	adds	r5, #104	; 0x68
 8006c78:	e7e9      	b.n	8006c4e <_fwalk_reent+0x12>
	...

08006c7c <__libc_init_array>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4d0d      	ldr	r5, [pc, #52]	; (8006cb4 <__libc_init_array+0x38>)
 8006c80:	4c0d      	ldr	r4, [pc, #52]	; (8006cb8 <__libc_init_array+0x3c>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	2600      	movs	r6, #0
 8006c88:	42a6      	cmp	r6, r4
 8006c8a:	d109      	bne.n	8006ca0 <__libc_init_array+0x24>
 8006c8c:	4d0b      	ldr	r5, [pc, #44]	; (8006cbc <__libc_init_array+0x40>)
 8006c8e:	4c0c      	ldr	r4, [pc, #48]	; (8006cc0 <__libc_init_array+0x44>)
 8006c90:	f000 feda 	bl	8007a48 <_init>
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	2600      	movs	r6, #0
 8006c9a:	42a6      	cmp	r6, r4
 8006c9c:	d105      	bne.n	8006caa <__libc_init_array+0x2e>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca4:	4798      	blx	r3
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7ee      	b.n	8006c88 <__libc_init_array+0xc>
 8006caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cae:	4798      	blx	r3
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7f2      	b.n	8006c9a <__libc_init_array+0x1e>
 8006cb4:	08007e90 	.word	0x08007e90
 8006cb8:	08007e90 	.word	0x08007e90
 8006cbc:	08007e90 	.word	0x08007e90
 8006cc0:	08007e94 	.word	0x08007e94

08006cc4 <__retarget_lock_init_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__retarget_lock_acquire_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <__retarget_lock_release_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <memcpy>:
 8006cca:	440a      	add	r2, r1
 8006ccc:	4291      	cmp	r1, r2
 8006cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd2:	d100      	bne.n	8006cd6 <memcpy+0xc>
 8006cd4:	4770      	bx	lr
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce0:	4291      	cmp	r1, r2
 8006ce2:	d1f9      	bne.n	8006cd8 <memcpy+0xe>
 8006ce4:	bd10      	pop	{r4, pc}

08006ce6 <memset>:
 8006ce6:	4402      	add	r2, r0
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d100      	bne.n	8006cf0 <memset+0xa>
 8006cee:	4770      	bx	lr
 8006cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf4:	e7f9      	b.n	8006cea <memset+0x4>
	...

08006cf8 <_free_r>:
 8006cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	d044      	beq.n	8006d88 <_free_r+0x90>
 8006cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d02:	9001      	str	r0, [sp, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f1a1 0404 	sub.w	r4, r1, #4
 8006d0a:	bfb8      	it	lt
 8006d0c:	18e4      	addlt	r4, r4, r3
 8006d0e:	f000 fb25 	bl	800735c <__malloc_lock>
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <_free_r+0x94>)
 8006d14:	9801      	ldr	r0, [sp, #4]
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	b933      	cbnz	r3, 8006d28 <_free_r+0x30>
 8006d1a:	6063      	str	r3, [r4, #4]
 8006d1c:	6014      	str	r4, [r2, #0]
 8006d1e:	b003      	add	sp, #12
 8006d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d24:	f000 bb20 	b.w	8007368 <__malloc_unlock>
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d908      	bls.n	8006d3e <_free_r+0x46>
 8006d2c:	6825      	ldr	r5, [r4, #0]
 8006d2e:	1961      	adds	r1, r4, r5
 8006d30:	428b      	cmp	r3, r1
 8006d32:	bf01      	itttt	eq
 8006d34:	6819      	ldreq	r1, [r3, #0]
 8006d36:	685b      	ldreq	r3, [r3, #4]
 8006d38:	1949      	addeq	r1, r1, r5
 8006d3a:	6021      	streq	r1, [r4, #0]
 8006d3c:	e7ed      	b.n	8006d1a <_free_r+0x22>
 8006d3e:	461a      	mov	r2, r3
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b10b      	cbz	r3, 8006d48 <_free_r+0x50>
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d9fa      	bls.n	8006d3e <_free_r+0x46>
 8006d48:	6811      	ldr	r1, [r2, #0]
 8006d4a:	1855      	adds	r5, r2, r1
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d10b      	bne.n	8006d68 <_free_r+0x70>
 8006d50:	6824      	ldr	r4, [r4, #0]
 8006d52:	4421      	add	r1, r4
 8006d54:	1854      	adds	r4, r2, r1
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	d1e0      	bne.n	8006d1e <_free_r+0x26>
 8006d5c:	681c      	ldr	r4, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	6053      	str	r3, [r2, #4]
 8006d62:	4421      	add	r1, r4
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	e7da      	b.n	8006d1e <_free_r+0x26>
 8006d68:	d902      	bls.n	8006d70 <_free_r+0x78>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	e7d6      	b.n	8006d1e <_free_r+0x26>
 8006d70:	6825      	ldr	r5, [r4, #0]
 8006d72:	1961      	adds	r1, r4, r5
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf04      	itt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	6063      	str	r3, [r4, #4]
 8006d7e:	bf04      	itt	eq
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	6054      	str	r4, [r2, #4]
 8006d86:	e7ca      	b.n	8006d1e <_free_r+0x26>
 8006d88:	b003      	add	sp, #12
 8006d8a:	bd30      	pop	{r4, r5, pc}
 8006d8c:	20004a98 	.word	0x20004a98

08006d90 <sbrk_aligned>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	4e0e      	ldr	r6, [pc, #56]	; (8006dcc <sbrk_aligned+0x3c>)
 8006d94:	460c      	mov	r4, r1
 8006d96:	6831      	ldr	r1, [r6, #0]
 8006d98:	4605      	mov	r5, r0
 8006d9a:	b911      	cbnz	r1, 8006da2 <sbrk_aligned+0x12>
 8006d9c:	f000 f930 	bl	8007000 <_sbrk_r>
 8006da0:	6030      	str	r0, [r6, #0]
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f92b 	bl	8007000 <_sbrk_r>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d00a      	beq.n	8006dc4 <sbrk_aligned+0x34>
 8006dae:	1cc4      	adds	r4, r0, #3
 8006db0:	f024 0403 	bic.w	r4, r4, #3
 8006db4:	42a0      	cmp	r0, r4
 8006db6:	d007      	beq.n	8006dc8 <sbrk_aligned+0x38>
 8006db8:	1a21      	subs	r1, r4, r0
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 f920 	bl	8007000 <_sbrk_r>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d101      	bne.n	8006dc8 <sbrk_aligned+0x38>
 8006dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8006dc8:	4620      	mov	r0, r4
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	20004a9c 	.word	0x20004a9c

08006dd0 <_malloc_r>:
 8006dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd4:	1ccd      	adds	r5, r1, #3
 8006dd6:	f025 0503 	bic.w	r5, r5, #3
 8006dda:	3508      	adds	r5, #8
 8006ddc:	2d0c      	cmp	r5, #12
 8006dde:	bf38      	it	cc
 8006de0:	250c      	movcc	r5, #12
 8006de2:	2d00      	cmp	r5, #0
 8006de4:	4607      	mov	r7, r0
 8006de6:	db01      	blt.n	8006dec <_malloc_r+0x1c>
 8006de8:	42a9      	cmp	r1, r5
 8006dea:	d905      	bls.n	8006df8 <_malloc_r+0x28>
 8006dec:	230c      	movs	r3, #12
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	2600      	movs	r6, #0
 8006df2:	4630      	mov	r0, r6
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df8:	4e2e      	ldr	r6, [pc, #184]	; (8006eb4 <_malloc_r+0xe4>)
 8006dfa:	f000 faaf 	bl	800735c <__malloc_lock>
 8006dfe:	6833      	ldr	r3, [r6, #0]
 8006e00:	461c      	mov	r4, r3
 8006e02:	bb34      	cbnz	r4, 8006e52 <_malloc_r+0x82>
 8006e04:	4629      	mov	r1, r5
 8006e06:	4638      	mov	r0, r7
 8006e08:	f7ff ffc2 	bl	8006d90 <sbrk_aligned>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	4604      	mov	r4, r0
 8006e10:	d14d      	bne.n	8006eae <_malloc_r+0xde>
 8006e12:	6834      	ldr	r4, [r6, #0]
 8006e14:	4626      	mov	r6, r4
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	d140      	bne.n	8006e9c <_malloc_r+0xcc>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4638      	mov	r0, r7
 8006e20:	eb04 0803 	add.w	r8, r4, r3
 8006e24:	f000 f8ec 	bl	8007000 <_sbrk_r>
 8006e28:	4580      	cmp	r8, r0
 8006e2a:	d13a      	bne.n	8006ea2 <_malloc_r+0xd2>
 8006e2c:	6821      	ldr	r1, [r4, #0]
 8006e2e:	3503      	adds	r5, #3
 8006e30:	1a6d      	subs	r5, r5, r1
 8006e32:	f025 0503 	bic.w	r5, r5, #3
 8006e36:	3508      	adds	r5, #8
 8006e38:	2d0c      	cmp	r5, #12
 8006e3a:	bf38      	it	cc
 8006e3c:	250c      	movcc	r5, #12
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7ff ffa5 	bl	8006d90 <sbrk_aligned>
 8006e46:	3001      	adds	r0, #1
 8006e48:	d02b      	beq.n	8006ea2 <_malloc_r+0xd2>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	442b      	add	r3, r5
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	e00e      	b.n	8006e70 <_malloc_r+0xa0>
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	1b52      	subs	r2, r2, r5
 8006e56:	d41e      	bmi.n	8006e96 <_malloc_r+0xc6>
 8006e58:	2a0b      	cmp	r2, #11
 8006e5a:	d916      	bls.n	8006e8a <_malloc_r+0xba>
 8006e5c:	1961      	adds	r1, r4, r5
 8006e5e:	42a3      	cmp	r3, r4
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	bf18      	it	ne
 8006e64:	6059      	strne	r1, [r3, #4]
 8006e66:	6863      	ldr	r3, [r4, #4]
 8006e68:	bf08      	it	eq
 8006e6a:	6031      	streq	r1, [r6, #0]
 8006e6c:	5162      	str	r2, [r4, r5]
 8006e6e:	604b      	str	r3, [r1, #4]
 8006e70:	4638      	mov	r0, r7
 8006e72:	f104 060b 	add.w	r6, r4, #11
 8006e76:	f000 fa77 	bl	8007368 <__malloc_unlock>
 8006e7a:	f026 0607 	bic.w	r6, r6, #7
 8006e7e:	1d23      	adds	r3, r4, #4
 8006e80:	1af2      	subs	r2, r6, r3
 8006e82:	d0b6      	beq.n	8006df2 <_malloc_r+0x22>
 8006e84:	1b9b      	subs	r3, r3, r6
 8006e86:	50a3      	str	r3, [r4, r2]
 8006e88:	e7b3      	b.n	8006df2 <_malloc_r+0x22>
 8006e8a:	6862      	ldr	r2, [r4, #4]
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	bf0c      	ite	eq
 8006e90:	6032      	streq	r2, [r6, #0]
 8006e92:	605a      	strne	r2, [r3, #4]
 8006e94:	e7ec      	b.n	8006e70 <_malloc_r+0xa0>
 8006e96:	4623      	mov	r3, r4
 8006e98:	6864      	ldr	r4, [r4, #4]
 8006e9a:	e7b2      	b.n	8006e02 <_malloc_r+0x32>
 8006e9c:	4634      	mov	r4, r6
 8006e9e:	6876      	ldr	r6, [r6, #4]
 8006ea0:	e7b9      	b.n	8006e16 <_malloc_r+0x46>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f000 fa5e 	bl	8007368 <__malloc_unlock>
 8006eac:	e7a1      	b.n	8006df2 <_malloc_r+0x22>
 8006eae:	6025      	str	r5, [r4, #0]
 8006eb0:	e7de      	b.n	8006e70 <_malloc_r+0xa0>
 8006eb2:	bf00      	nop
 8006eb4:	20004a98 	.word	0x20004a98

08006eb8 <iprintf>:
 8006eb8:	b40f      	push	{r0, r1, r2, r3}
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <iprintf+0x2c>)
 8006ebc:	b513      	push	{r0, r1, r4, lr}
 8006ebe:	681c      	ldr	r4, [r3, #0]
 8006ec0:	b124      	cbz	r4, 8006ecc <iprintf+0x14>
 8006ec2:	69a3      	ldr	r3, [r4, #24]
 8006ec4:	b913      	cbnz	r3, 8006ecc <iprintf+0x14>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff fe3a 	bl	8006b40 <__sinit>
 8006ecc:	ab05      	add	r3, sp, #20
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	68a1      	ldr	r1, [r4, #8]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fa77 	bl	80073c8 <_vfiprintf_r>
 8006eda:	b002      	add	sp, #8
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	b004      	add	sp, #16
 8006ee2:	4770      	bx	lr
 8006ee4:	20000014 	.word	0x20000014

08006ee8 <putchar>:
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <putchar+0x28>)
 8006eea:	b513      	push	{r0, r1, r4, lr}
 8006eec:	681c      	ldr	r4, [r3, #0]
 8006eee:	4601      	mov	r1, r0
 8006ef0:	b134      	cbz	r4, 8006f00 <putchar+0x18>
 8006ef2:	69a3      	ldr	r3, [r4, #24]
 8006ef4:	b923      	cbnz	r3, 8006f00 <putchar+0x18>
 8006ef6:	9001      	str	r0, [sp, #4]
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7ff fe21 	bl	8006b40 <__sinit>
 8006efe:	9901      	ldr	r1, [sp, #4]
 8006f00:	68a2      	ldr	r2, [r4, #8]
 8006f02:	4620      	mov	r0, r4
 8006f04:	b002      	add	sp, #8
 8006f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0a:	f000 bd21 	b.w	8007950 <_putc_r>
 8006f0e:	bf00      	nop
 8006f10:	20000014 	.word	0x20000014

08006f14 <_puts_r>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	460e      	mov	r6, r1
 8006f18:	4605      	mov	r5, r0
 8006f1a:	b118      	cbz	r0, 8006f24 <_puts_r+0x10>
 8006f1c:	6983      	ldr	r3, [r0, #24]
 8006f1e:	b90b      	cbnz	r3, 8006f24 <_puts_r+0x10>
 8006f20:	f7ff fe0e 	bl	8006b40 <__sinit>
 8006f24:	69ab      	ldr	r3, [r5, #24]
 8006f26:	68ac      	ldr	r4, [r5, #8]
 8006f28:	b913      	cbnz	r3, 8006f30 <_puts_r+0x1c>
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f7ff fe08 	bl	8006b40 <__sinit>
 8006f30:	4b2c      	ldr	r3, [pc, #176]	; (8006fe4 <_puts_r+0xd0>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d120      	bne.n	8006f78 <_puts_r+0x64>
 8006f36:	686c      	ldr	r4, [r5, #4]
 8006f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d405      	bmi.n	8006f4a <_puts_r+0x36>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	0598      	lsls	r0, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_puts_r+0x36>
 8006f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f46:	f7ff febe 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	0719      	lsls	r1, r3, #28
 8006f4e:	d51d      	bpl.n	8006f8c <_puts_r+0x78>
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	b1db      	cbz	r3, 8006f8c <_puts_r+0x78>
 8006f54:	3e01      	subs	r6, #1
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	bb39      	cbnz	r1, 8006fb2 <_puts_r+0x9e>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da38      	bge.n	8006fd8 <_puts_r+0xc4>
 8006f66:	4622      	mov	r2, r4
 8006f68:	210a      	movs	r1, #10
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f89c 	bl	80070a8 <__swbuf_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d011      	beq.n	8006f98 <_puts_r+0x84>
 8006f74:	250a      	movs	r5, #10
 8006f76:	e011      	b.n	8006f9c <_puts_r+0x88>
 8006f78:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <_puts_r+0xd4>)
 8006f7a:	429c      	cmp	r4, r3
 8006f7c:	d101      	bne.n	8006f82 <_puts_r+0x6e>
 8006f7e:	68ac      	ldr	r4, [r5, #8]
 8006f80:	e7da      	b.n	8006f38 <_puts_r+0x24>
 8006f82:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <_puts_r+0xd8>)
 8006f84:	429c      	cmp	r4, r3
 8006f86:	bf08      	it	eq
 8006f88:	68ec      	ldreq	r4, [r5, #12]
 8006f8a:	e7d5      	b.n	8006f38 <_puts_r+0x24>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 f8ee 	bl	8007170 <__swsetup_r>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d0dd      	beq.n	8006f54 <_puts_r+0x40>
 8006f98:	f04f 35ff 	mov.w	r5, #4294967295
 8006f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f9e:	07da      	lsls	r2, r3, #31
 8006fa0:	d405      	bmi.n	8006fae <_puts_r+0x9a>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	059b      	lsls	r3, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_puts_r+0x9a>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006faa:	f7ff fe8d 	bl	8006cc8 <__retarget_lock_release_recursive>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da04      	bge.n	8006fc0 <_puts_r+0xac>
 8006fb6:	69a2      	ldr	r2, [r4, #24]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	dc06      	bgt.n	8006fca <_puts_r+0xb6>
 8006fbc:	290a      	cmp	r1, #10
 8006fbe:	d004      	beq.n	8006fca <_puts_r+0xb6>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	7019      	strb	r1, [r3, #0]
 8006fc8:	e7c5      	b.n	8006f56 <_puts_r+0x42>
 8006fca:	4622      	mov	r2, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f86b 	bl	80070a8 <__swbuf_r>
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d1bf      	bne.n	8006f56 <_puts_r+0x42>
 8006fd6:	e7df      	b.n	8006f98 <_puts_r+0x84>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	250a      	movs	r5, #10
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	6022      	str	r2, [r4, #0]
 8006fe0:	701d      	strb	r5, [r3, #0]
 8006fe2:	e7db      	b.n	8006f9c <_puts_r+0x88>
 8006fe4:	08007e10 	.word	0x08007e10
 8006fe8:	08007e30 	.word	0x08007e30
 8006fec:	08007df0 	.word	0x08007df0

08006ff0 <puts>:
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <puts+0xc>)
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f7ff bf8d 	b.w	8006f14 <_puts_r>
 8006ffa:	bf00      	nop
 8006ffc:	20000014 	.word	0x20000014

08007000 <_sbrk_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	; (800701c <_sbrk_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7f9 fff6 	bl	8000ffc <_sbrk>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_sbrk_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_sbrk_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20004aa0 	.word	0x20004aa0

08007020 <__sread>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	f000 fcda 	bl	80079e0 <_read_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	bfab      	itete	ge
 8007030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007032:	89a3      	ldrhlt	r3, [r4, #12]
 8007034:	181b      	addge	r3, r3, r0
 8007036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800703a:	bfac      	ite	ge
 800703c:	6563      	strge	r3, [r4, #84]	; 0x54
 800703e:	81a3      	strhlt	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__swrite>:
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	461f      	mov	r7, r3
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	05db      	lsls	r3, r3, #23
 800704c:	4605      	mov	r5, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d505      	bpl.n	8007060 <__swrite+0x1e>
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2302      	movs	r3, #2
 800705a:	2200      	movs	r2, #0
 800705c:	f000 f906 	bl	800726c <_lseek_r>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	4632      	mov	r2, r6
 800706e:	463b      	mov	r3, r7
 8007070:	4628      	mov	r0, r5
 8007072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	f000 b869 	b.w	800714c <_write_r>

0800707a <__sseek>:
 800707a:	b510      	push	{r4, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 f8f3 	bl	800726c <_lseek_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	bf15      	itete	ne
 800708c:	6560      	strne	r0, [r4, #84]	; 0x54
 800708e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007096:	81a3      	strheq	r3, [r4, #12]
 8007098:	bf18      	it	ne
 800709a:	81a3      	strhne	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__sclose>:
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 b8d3 	b.w	800724c <_close_r>
	...

080070a8 <__swbuf_r>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	460e      	mov	r6, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	4605      	mov	r5, r0
 80070b0:	b118      	cbz	r0, 80070ba <__swbuf_r+0x12>
 80070b2:	6983      	ldr	r3, [r0, #24]
 80070b4:	b90b      	cbnz	r3, 80070ba <__swbuf_r+0x12>
 80070b6:	f7ff fd43 	bl	8006b40 <__sinit>
 80070ba:	4b21      	ldr	r3, [pc, #132]	; (8007140 <__swbuf_r+0x98>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	d12b      	bne.n	8007118 <__swbuf_r+0x70>
 80070c0:	686c      	ldr	r4, [r5, #4]
 80070c2:	69a3      	ldr	r3, [r4, #24]
 80070c4:	60a3      	str	r3, [r4, #8]
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	071a      	lsls	r2, r3, #28
 80070ca:	d52f      	bpl.n	800712c <__swbuf_r+0x84>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	b36b      	cbz	r3, 800712c <__swbuf_r+0x84>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	6820      	ldr	r0, [r4, #0]
 80070d4:	1ac0      	subs	r0, r0, r3
 80070d6:	6963      	ldr	r3, [r4, #20]
 80070d8:	b2f6      	uxtb	r6, r6
 80070da:	4283      	cmp	r3, r0
 80070dc:	4637      	mov	r7, r6
 80070de:	dc04      	bgt.n	80070ea <__swbuf_r+0x42>
 80070e0:	4621      	mov	r1, r4
 80070e2:	4628      	mov	r0, r5
 80070e4:	f7ff fc86 	bl	80069f4 <_fflush_r>
 80070e8:	bb30      	cbnz	r0, 8007138 <__swbuf_r+0x90>
 80070ea:	68a3      	ldr	r3, [r4, #8]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	60a3      	str	r3, [r4, #8]
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	6022      	str	r2, [r4, #0]
 80070f6:	701e      	strb	r6, [r3, #0]
 80070f8:	6963      	ldr	r3, [r4, #20]
 80070fa:	3001      	adds	r0, #1
 80070fc:	4283      	cmp	r3, r0
 80070fe:	d004      	beq.n	800710a <__swbuf_r+0x62>
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	07db      	lsls	r3, r3, #31
 8007104:	d506      	bpl.n	8007114 <__swbuf_r+0x6c>
 8007106:	2e0a      	cmp	r6, #10
 8007108:	d104      	bne.n	8007114 <__swbuf_r+0x6c>
 800710a:	4621      	mov	r1, r4
 800710c:	4628      	mov	r0, r5
 800710e:	f7ff fc71 	bl	80069f4 <_fflush_r>
 8007112:	b988      	cbnz	r0, 8007138 <__swbuf_r+0x90>
 8007114:	4638      	mov	r0, r7
 8007116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007118:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <__swbuf_r+0x9c>)
 800711a:	429c      	cmp	r4, r3
 800711c:	d101      	bne.n	8007122 <__swbuf_r+0x7a>
 800711e:	68ac      	ldr	r4, [r5, #8]
 8007120:	e7cf      	b.n	80070c2 <__swbuf_r+0x1a>
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <__swbuf_r+0xa0>)
 8007124:	429c      	cmp	r4, r3
 8007126:	bf08      	it	eq
 8007128:	68ec      	ldreq	r4, [r5, #12]
 800712a:	e7ca      	b.n	80070c2 <__swbuf_r+0x1a>
 800712c:	4621      	mov	r1, r4
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f81e 	bl	8007170 <__swsetup_r>
 8007134:	2800      	cmp	r0, #0
 8007136:	d0cb      	beq.n	80070d0 <__swbuf_r+0x28>
 8007138:	f04f 37ff 	mov.w	r7, #4294967295
 800713c:	e7ea      	b.n	8007114 <__swbuf_r+0x6c>
 800713e:	bf00      	nop
 8007140:	08007e10 	.word	0x08007e10
 8007144:	08007e30 	.word	0x08007e30
 8007148:	08007df0 	.word	0x08007df0

0800714c <_write_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d07      	ldr	r5, [pc, #28]	; (800716c <_write_r+0x20>)
 8007150:	4604      	mov	r4, r0
 8007152:	4608      	mov	r0, r1
 8007154:	4611      	mov	r1, r2
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7f9 fbdc 	bl	8000918 <_write>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_write_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_write_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20004aa0 	.word	0x20004aa0

08007170 <__swsetup_r>:
 8007170:	4b32      	ldr	r3, [pc, #200]	; (800723c <__swsetup_r+0xcc>)
 8007172:	b570      	push	{r4, r5, r6, lr}
 8007174:	681d      	ldr	r5, [r3, #0]
 8007176:	4606      	mov	r6, r0
 8007178:	460c      	mov	r4, r1
 800717a:	b125      	cbz	r5, 8007186 <__swsetup_r+0x16>
 800717c:	69ab      	ldr	r3, [r5, #24]
 800717e:	b913      	cbnz	r3, 8007186 <__swsetup_r+0x16>
 8007180:	4628      	mov	r0, r5
 8007182:	f7ff fcdd 	bl	8006b40 <__sinit>
 8007186:	4b2e      	ldr	r3, [pc, #184]	; (8007240 <__swsetup_r+0xd0>)
 8007188:	429c      	cmp	r4, r3
 800718a:	d10f      	bne.n	80071ac <__swsetup_r+0x3c>
 800718c:	686c      	ldr	r4, [r5, #4]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007194:	0719      	lsls	r1, r3, #28
 8007196:	d42c      	bmi.n	80071f2 <__swsetup_r+0x82>
 8007198:	06dd      	lsls	r5, r3, #27
 800719a:	d411      	bmi.n	80071c0 <__swsetup_r+0x50>
 800719c:	2309      	movs	r3, #9
 800719e:	6033      	str	r3, [r6, #0]
 80071a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	e03e      	b.n	800722a <__swsetup_r+0xba>
 80071ac:	4b25      	ldr	r3, [pc, #148]	; (8007244 <__swsetup_r+0xd4>)
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d101      	bne.n	80071b6 <__swsetup_r+0x46>
 80071b2:	68ac      	ldr	r4, [r5, #8]
 80071b4:	e7eb      	b.n	800718e <__swsetup_r+0x1e>
 80071b6:	4b24      	ldr	r3, [pc, #144]	; (8007248 <__swsetup_r+0xd8>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	bf08      	it	eq
 80071bc:	68ec      	ldreq	r4, [r5, #12]
 80071be:	e7e6      	b.n	800718e <__swsetup_r+0x1e>
 80071c0:	0758      	lsls	r0, r3, #29
 80071c2:	d512      	bpl.n	80071ea <__swsetup_r+0x7a>
 80071c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c6:	b141      	cbz	r1, 80071da <__swsetup_r+0x6a>
 80071c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071cc:	4299      	cmp	r1, r3
 80071ce:	d002      	beq.n	80071d6 <__swsetup_r+0x66>
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff fd91 	bl	8006cf8 <_free_r>
 80071d6:	2300      	movs	r3, #0
 80071d8:	6363      	str	r3, [r4, #52]	; 0x34
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	2300      	movs	r3, #0
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f043 0308 	orr.w	r3, r3, #8
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	b94b      	cbnz	r3, 800720a <__swsetup_r+0x9a>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007200:	d003      	beq.n	800720a <__swsetup_r+0x9a>
 8007202:	4621      	mov	r1, r4
 8007204:	4630      	mov	r0, r6
 8007206:	f000 f869 	bl	80072dc <__smakebuf_r>
 800720a:	89a0      	ldrh	r0, [r4, #12]
 800720c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007210:	f010 0301 	ands.w	r3, r0, #1
 8007214:	d00a      	beq.n	800722c <__swsetup_r+0xbc>
 8007216:	2300      	movs	r3, #0
 8007218:	60a3      	str	r3, [r4, #8]
 800721a:	6963      	ldr	r3, [r4, #20]
 800721c:	425b      	negs	r3, r3
 800721e:	61a3      	str	r3, [r4, #24]
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	b943      	cbnz	r3, 8007236 <__swsetup_r+0xc6>
 8007224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007228:	d1ba      	bne.n	80071a0 <__swsetup_r+0x30>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	0781      	lsls	r1, r0, #30
 800722e:	bf58      	it	pl
 8007230:	6963      	ldrpl	r3, [r4, #20]
 8007232:	60a3      	str	r3, [r4, #8]
 8007234:	e7f4      	b.n	8007220 <__swsetup_r+0xb0>
 8007236:	2000      	movs	r0, #0
 8007238:	e7f7      	b.n	800722a <__swsetup_r+0xba>
 800723a:	bf00      	nop
 800723c:	20000014 	.word	0x20000014
 8007240:	08007e10 	.word	0x08007e10
 8007244:	08007e30 	.word	0x08007e30
 8007248:	08007df0 	.word	0x08007df0

0800724c <_close_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_close_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7f9 fe9b 	bl	8000f92 <_close>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_close_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_close_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20004aa0 	.word	0x20004aa0

0800726c <_lseek_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	; (800728c <_lseek_r+0x20>)
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	2200      	movs	r2, #0
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f7f9 feb0 	bl	8000fe0 <_lseek>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_lseek_r+0x1e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_lseek_r+0x1e>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20004aa0 	.word	0x20004aa0

08007290 <__swhatbuf_r>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	460e      	mov	r6, r1
 8007294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007298:	2900      	cmp	r1, #0
 800729a:	b096      	sub	sp, #88	; 0x58
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	da08      	bge.n	80072b4 <__swhatbuf_r+0x24>
 80072a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	602a      	str	r2, [r5, #0]
 80072aa:	061a      	lsls	r2, r3, #24
 80072ac:	d410      	bmi.n	80072d0 <__swhatbuf_r+0x40>
 80072ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b2:	e00e      	b.n	80072d2 <__swhatbuf_r+0x42>
 80072b4:	466a      	mov	r2, sp
 80072b6:	f000 fba5 	bl	8007a04 <_fstat_r>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	dbf1      	blt.n	80072a2 <__swhatbuf_r+0x12>
 80072be:	9a01      	ldr	r2, [sp, #4]
 80072c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072c8:	425a      	negs	r2, r3
 80072ca:	415a      	adcs	r2, r3
 80072cc:	602a      	str	r2, [r5, #0]
 80072ce:	e7ee      	b.n	80072ae <__swhatbuf_r+0x1e>
 80072d0:	2340      	movs	r3, #64	; 0x40
 80072d2:	2000      	movs	r0, #0
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	b016      	add	sp, #88	; 0x58
 80072d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080072dc <__smakebuf_r>:
 80072dc:	898b      	ldrh	r3, [r1, #12]
 80072de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072e0:	079d      	lsls	r5, r3, #30
 80072e2:	4606      	mov	r6, r0
 80072e4:	460c      	mov	r4, r1
 80072e6:	d507      	bpl.n	80072f8 <__smakebuf_r+0x1c>
 80072e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	2301      	movs	r3, #1
 80072f2:	6163      	str	r3, [r4, #20]
 80072f4:	b002      	add	sp, #8
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	ab01      	add	r3, sp, #4
 80072fa:	466a      	mov	r2, sp
 80072fc:	f7ff ffc8 	bl	8007290 <__swhatbuf_r>
 8007300:	9900      	ldr	r1, [sp, #0]
 8007302:	4605      	mov	r5, r0
 8007304:	4630      	mov	r0, r6
 8007306:	f7ff fd63 	bl	8006dd0 <_malloc_r>
 800730a:	b948      	cbnz	r0, 8007320 <__smakebuf_r+0x44>
 800730c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007310:	059a      	lsls	r2, r3, #22
 8007312:	d4ef      	bmi.n	80072f4 <__smakebuf_r+0x18>
 8007314:	f023 0303 	bic.w	r3, r3, #3
 8007318:	f043 0302 	orr.w	r3, r3, #2
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	e7e3      	b.n	80072e8 <__smakebuf_r+0xc>
 8007320:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <__smakebuf_r+0x7c>)
 8007322:	62b3      	str	r3, [r6, #40]	; 0x28
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	6020      	str	r0, [r4, #0]
 8007328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	9b00      	ldr	r3, [sp, #0]
 8007330:	6163      	str	r3, [r4, #20]
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	6120      	str	r0, [r4, #16]
 8007336:	b15b      	cbz	r3, 8007350 <__smakebuf_r+0x74>
 8007338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800733c:	4630      	mov	r0, r6
 800733e:	f000 fb73 	bl	8007a28 <_isatty_r>
 8007342:	b128      	cbz	r0, 8007350 <__smakebuf_r+0x74>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	89a0      	ldrh	r0, [r4, #12]
 8007352:	4305      	orrs	r5, r0
 8007354:	81a5      	strh	r5, [r4, #12]
 8007356:	e7cd      	b.n	80072f4 <__smakebuf_r+0x18>
 8007358:	08006ad9 	.word	0x08006ad9

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff bcb2 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	20004a94 	.word	0x20004a94

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff bcad 	b.w	8006cc8 <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	20004a94 	.word	0x20004a94

08007374 <__sfputc_r>:
 8007374:	6893      	ldr	r3, [r2, #8]
 8007376:	3b01      	subs	r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	b410      	push	{r4}
 800737c:	6093      	str	r3, [r2, #8]
 800737e:	da08      	bge.n	8007392 <__sfputc_r+0x1e>
 8007380:	6994      	ldr	r4, [r2, #24]
 8007382:	42a3      	cmp	r3, r4
 8007384:	db01      	blt.n	800738a <__sfputc_r+0x16>
 8007386:	290a      	cmp	r1, #10
 8007388:	d103      	bne.n	8007392 <__sfputc_r+0x1e>
 800738a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800738e:	f7ff be8b 	b.w	80070a8 <__swbuf_r>
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	1c58      	adds	r0, r3, #1
 8007396:	6010      	str	r0, [r2, #0]
 8007398:	7019      	strb	r1, [r3, #0]
 800739a:	4608      	mov	r0, r1
 800739c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <__sfputs_r>:
 80073a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a4:	4606      	mov	r6, r0
 80073a6:	460f      	mov	r7, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	18d5      	adds	r5, r2, r3
 80073ac:	42ac      	cmp	r4, r5
 80073ae:	d101      	bne.n	80073b4 <__sfputs_r+0x12>
 80073b0:	2000      	movs	r0, #0
 80073b2:	e007      	b.n	80073c4 <__sfputs_r+0x22>
 80073b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b8:	463a      	mov	r2, r7
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7ff ffda 	bl	8007374 <__sfputc_r>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d1f3      	bne.n	80073ac <__sfputs_r+0xa>
 80073c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073c8 <_vfiprintf_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	460d      	mov	r5, r1
 80073ce:	b09d      	sub	sp, #116	; 0x74
 80073d0:	4614      	mov	r4, r2
 80073d2:	4698      	mov	r8, r3
 80073d4:	4606      	mov	r6, r0
 80073d6:	b118      	cbz	r0, 80073e0 <_vfiprintf_r+0x18>
 80073d8:	6983      	ldr	r3, [r0, #24]
 80073da:	b90b      	cbnz	r3, 80073e0 <_vfiprintf_r+0x18>
 80073dc:	f7ff fbb0 	bl	8006b40 <__sinit>
 80073e0:	4b89      	ldr	r3, [pc, #548]	; (8007608 <_vfiprintf_r+0x240>)
 80073e2:	429d      	cmp	r5, r3
 80073e4:	d11b      	bne.n	800741e <_vfiprintf_r+0x56>
 80073e6:	6875      	ldr	r5, [r6, #4]
 80073e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ea:	07d9      	lsls	r1, r3, #31
 80073ec:	d405      	bmi.n	80073fa <_vfiprintf_r+0x32>
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	059a      	lsls	r2, r3, #22
 80073f2:	d402      	bmi.n	80073fa <_vfiprintf_r+0x32>
 80073f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073f6:	f7ff fc66 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	071b      	lsls	r3, r3, #28
 80073fe:	d501      	bpl.n	8007404 <_vfiprintf_r+0x3c>
 8007400:	692b      	ldr	r3, [r5, #16]
 8007402:	b9eb      	cbnz	r3, 8007440 <_vfiprintf_r+0x78>
 8007404:	4629      	mov	r1, r5
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff feb2 	bl	8007170 <__swsetup_r>
 800740c:	b1c0      	cbz	r0, 8007440 <_vfiprintf_r+0x78>
 800740e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007410:	07dc      	lsls	r4, r3, #31
 8007412:	d50e      	bpl.n	8007432 <_vfiprintf_r+0x6a>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	b01d      	add	sp, #116	; 0x74
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	4b7b      	ldr	r3, [pc, #492]	; (800760c <_vfiprintf_r+0x244>)
 8007420:	429d      	cmp	r5, r3
 8007422:	d101      	bne.n	8007428 <_vfiprintf_r+0x60>
 8007424:	68b5      	ldr	r5, [r6, #8]
 8007426:	e7df      	b.n	80073e8 <_vfiprintf_r+0x20>
 8007428:	4b79      	ldr	r3, [pc, #484]	; (8007610 <_vfiprintf_r+0x248>)
 800742a:	429d      	cmp	r5, r3
 800742c:	bf08      	it	eq
 800742e:	68f5      	ldreq	r5, [r6, #12]
 8007430:	e7da      	b.n	80073e8 <_vfiprintf_r+0x20>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	0598      	lsls	r0, r3, #22
 8007436:	d4ed      	bmi.n	8007414 <_vfiprintf_r+0x4c>
 8007438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800743a:	f7ff fc45 	bl	8006cc8 <__retarget_lock_release_recursive>
 800743e:	e7e9      	b.n	8007414 <_vfiprintf_r+0x4c>
 8007440:	2300      	movs	r3, #0
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	2320      	movs	r3, #32
 8007446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800744a:	f8cd 800c 	str.w	r8, [sp, #12]
 800744e:	2330      	movs	r3, #48	; 0x30
 8007450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007614 <_vfiprintf_r+0x24c>
 8007454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007458:	f04f 0901 	mov.w	r9, #1
 800745c:	4623      	mov	r3, r4
 800745e:	469a      	mov	sl, r3
 8007460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007464:	b10a      	cbz	r2, 800746a <_vfiprintf_r+0xa2>
 8007466:	2a25      	cmp	r2, #37	; 0x25
 8007468:	d1f9      	bne.n	800745e <_vfiprintf_r+0x96>
 800746a:	ebba 0b04 	subs.w	fp, sl, r4
 800746e:	d00b      	beq.n	8007488 <_vfiprintf_r+0xc0>
 8007470:	465b      	mov	r3, fp
 8007472:	4622      	mov	r2, r4
 8007474:	4629      	mov	r1, r5
 8007476:	4630      	mov	r0, r6
 8007478:	f7ff ff93 	bl	80073a2 <__sfputs_r>
 800747c:	3001      	adds	r0, #1
 800747e:	f000 80aa 	beq.w	80075d6 <_vfiprintf_r+0x20e>
 8007482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007484:	445a      	add	r2, fp
 8007486:	9209      	str	r2, [sp, #36]	; 0x24
 8007488:	f89a 3000 	ldrb.w	r3, [sl]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80a2 	beq.w	80075d6 <_vfiprintf_r+0x20e>
 8007492:	2300      	movs	r3, #0
 8007494:	f04f 32ff 	mov.w	r2, #4294967295
 8007498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800749c:	f10a 0a01 	add.w	sl, sl, #1
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	9307      	str	r3, [sp, #28]
 80074a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a8:	931a      	str	r3, [sp, #104]	; 0x68
 80074aa:	4654      	mov	r4, sl
 80074ac:	2205      	movs	r2, #5
 80074ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b2:	4858      	ldr	r0, [pc, #352]	; (8007614 <_vfiprintf_r+0x24c>)
 80074b4:	f7f8 febc 	bl	8000230 <memchr>
 80074b8:	9a04      	ldr	r2, [sp, #16]
 80074ba:	b9d8      	cbnz	r0, 80074f4 <_vfiprintf_r+0x12c>
 80074bc:	06d1      	lsls	r1, r2, #27
 80074be:	bf44      	itt	mi
 80074c0:	2320      	movmi	r3, #32
 80074c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c6:	0713      	lsls	r3, r2, #28
 80074c8:	bf44      	itt	mi
 80074ca:	232b      	movmi	r3, #43	; 0x2b
 80074cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d0:	f89a 3000 	ldrb.w	r3, [sl]
 80074d4:	2b2a      	cmp	r3, #42	; 0x2a
 80074d6:	d015      	beq.n	8007504 <_vfiprintf_r+0x13c>
 80074d8:	9a07      	ldr	r2, [sp, #28]
 80074da:	4654      	mov	r4, sl
 80074dc:	2000      	movs	r0, #0
 80074de:	f04f 0c0a 	mov.w	ip, #10
 80074e2:	4621      	mov	r1, r4
 80074e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e8:	3b30      	subs	r3, #48	; 0x30
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d94e      	bls.n	800758c <_vfiprintf_r+0x1c4>
 80074ee:	b1b0      	cbz	r0, 800751e <_vfiprintf_r+0x156>
 80074f0:	9207      	str	r2, [sp, #28]
 80074f2:	e014      	b.n	800751e <_vfiprintf_r+0x156>
 80074f4:	eba0 0308 	sub.w	r3, r0, r8
 80074f8:	fa09 f303 	lsl.w	r3, r9, r3
 80074fc:	4313      	orrs	r3, r2
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	46a2      	mov	sl, r4
 8007502:	e7d2      	b.n	80074aa <_vfiprintf_r+0xe2>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	1d19      	adds	r1, r3, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	9103      	str	r1, [sp, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	bfbb      	ittet	lt
 8007510:	425b      	neglt	r3, r3
 8007512:	f042 0202 	orrlt.w	r2, r2, #2
 8007516:	9307      	strge	r3, [sp, #28]
 8007518:	9307      	strlt	r3, [sp, #28]
 800751a:	bfb8      	it	lt
 800751c:	9204      	strlt	r2, [sp, #16]
 800751e:	7823      	ldrb	r3, [r4, #0]
 8007520:	2b2e      	cmp	r3, #46	; 0x2e
 8007522:	d10c      	bne.n	800753e <_vfiprintf_r+0x176>
 8007524:	7863      	ldrb	r3, [r4, #1]
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	d135      	bne.n	8007596 <_vfiprintf_r+0x1ce>
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	1d1a      	adds	r2, r3, #4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	9203      	str	r2, [sp, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfb8      	it	lt
 8007536:	f04f 33ff 	movlt.w	r3, #4294967295
 800753a:	3402      	adds	r4, #2
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007624 <_vfiprintf_r+0x25c>
 8007542:	7821      	ldrb	r1, [r4, #0]
 8007544:	2203      	movs	r2, #3
 8007546:	4650      	mov	r0, sl
 8007548:	f7f8 fe72 	bl	8000230 <memchr>
 800754c:	b140      	cbz	r0, 8007560 <_vfiprintf_r+0x198>
 800754e:	2340      	movs	r3, #64	; 0x40
 8007550:	eba0 000a 	sub.w	r0, r0, sl
 8007554:	fa03 f000 	lsl.w	r0, r3, r0
 8007558:	9b04      	ldr	r3, [sp, #16]
 800755a:	4303      	orrs	r3, r0
 800755c:	3401      	adds	r4, #1
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007564:	482c      	ldr	r0, [pc, #176]	; (8007618 <_vfiprintf_r+0x250>)
 8007566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800756a:	2206      	movs	r2, #6
 800756c:	f7f8 fe60 	bl	8000230 <memchr>
 8007570:	2800      	cmp	r0, #0
 8007572:	d03f      	beq.n	80075f4 <_vfiprintf_r+0x22c>
 8007574:	4b29      	ldr	r3, [pc, #164]	; (800761c <_vfiprintf_r+0x254>)
 8007576:	bb1b      	cbnz	r3, 80075c0 <_vfiprintf_r+0x1f8>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	3307      	adds	r3, #7
 800757c:	f023 0307 	bic.w	r3, r3, #7
 8007580:	3308      	adds	r3, #8
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007586:	443b      	add	r3, r7
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	e767      	b.n	800745c <_vfiprintf_r+0x94>
 800758c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007590:	460c      	mov	r4, r1
 8007592:	2001      	movs	r0, #1
 8007594:	e7a5      	b.n	80074e2 <_vfiprintf_r+0x11a>
 8007596:	2300      	movs	r3, #0
 8007598:	3401      	adds	r4, #1
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	4619      	mov	r1, r3
 800759e:	f04f 0c0a 	mov.w	ip, #10
 80075a2:	4620      	mov	r0, r4
 80075a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a8:	3a30      	subs	r2, #48	; 0x30
 80075aa:	2a09      	cmp	r2, #9
 80075ac:	d903      	bls.n	80075b6 <_vfiprintf_r+0x1ee>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0c5      	beq.n	800753e <_vfiprintf_r+0x176>
 80075b2:	9105      	str	r1, [sp, #20]
 80075b4:	e7c3      	b.n	800753e <_vfiprintf_r+0x176>
 80075b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ba:	4604      	mov	r4, r0
 80075bc:	2301      	movs	r3, #1
 80075be:	e7f0      	b.n	80075a2 <_vfiprintf_r+0x1da>
 80075c0:	ab03      	add	r3, sp, #12
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	462a      	mov	r2, r5
 80075c6:	4b16      	ldr	r3, [pc, #88]	; (8007620 <_vfiprintf_r+0x258>)
 80075c8:	a904      	add	r1, sp, #16
 80075ca:	4630      	mov	r0, r6
 80075cc:	f3af 8000 	nop.w
 80075d0:	4607      	mov	r7, r0
 80075d2:	1c78      	adds	r0, r7, #1
 80075d4:	d1d6      	bne.n	8007584 <_vfiprintf_r+0x1bc>
 80075d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d8:	07d9      	lsls	r1, r3, #31
 80075da:	d405      	bmi.n	80075e8 <_vfiprintf_r+0x220>
 80075dc:	89ab      	ldrh	r3, [r5, #12]
 80075de:	059a      	lsls	r2, r3, #22
 80075e0:	d402      	bmi.n	80075e8 <_vfiprintf_r+0x220>
 80075e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e4:	f7ff fb70 	bl	8006cc8 <__retarget_lock_release_recursive>
 80075e8:	89ab      	ldrh	r3, [r5, #12]
 80075ea:	065b      	lsls	r3, r3, #25
 80075ec:	f53f af12 	bmi.w	8007414 <_vfiprintf_r+0x4c>
 80075f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075f2:	e711      	b.n	8007418 <_vfiprintf_r+0x50>
 80075f4:	ab03      	add	r3, sp, #12
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	462a      	mov	r2, r5
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <_vfiprintf_r+0x258>)
 80075fc:	a904      	add	r1, sp, #16
 80075fe:	4630      	mov	r0, r6
 8007600:	f000 f880 	bl	8007704 <_printf_i>
 8007604:	e7e4      	b.n	80075d0 <_vfiprintf_r+0x208>
 8007606:	bf00      	nop
 8007608:	08007e10 	.word	0x08007e10
 800760c:	08007e30 	.word	0x08007e30
 8007610:	08007df0 	.word	0x08007df0
 8007614:	08007e54 	.word	0x08007e54
 8007618:	08007e5e 	.word	0x08007e5e
 800761c:	00000000 	.word	0x00000000
 8007620:	080073a3 	.word	0x080073a3
 8007624:	08007e5a 	.word	0x08007e5a

08007628 <_printf_common>:
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	4616      	mov	r6, r2
 800762e:	4699      	mov	r9, r3
 8007630:	688a      	ldr	r2, [r1, #8]
 8007632:	690b      	ldr	r3, [r1, #16]
 8007634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007638:	4293      	cmp	r3, r2
 800763a:	bfb8      	it	lt
 800763c:	4613      	movlt	r3, r2
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007644:	4607      	mov	r7, r0
 8007646:	460c      	mov	r4, r1
 8007648:	b10a      	cbz	r2, 800764e <_printf_common+0x26>
 800764a:	3301      	adds	r3, #1
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	0699      	lsls	r1, r3, #26
 8007652:	bf42      	ittt	mi
 8007654:	6833      	ldrmi	r3, [r6, #0]
 8007656:	3302      	addmi	r3, #2
 8007658:	6033      	strmi	r3, [r6, #0]
 800765a:	6825      	ldr	r5, [r4, #0]
 800765c:	f015 0506 	ands.w	r5, r5, #6
 8007660:	d106      	bne.n	8007670 <_printf_common+0x48>
 8007662:	f104 0a19 	add.w	sl, r4, #25
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	6832      	ldr	r2, [r6, #0]
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	42ab      	cmp	r3, r5
 800766e:	dc26      	bgt.n	80076be <_printf_common+0x96>
 8007670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007674:	1e13      	subs	r3, r2, #0
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	bf18      	it	ne
 800767a:	2301      	movne	r3, #1
 800767c:	0692      	lsls	r2, r2, #26
 800767e:	d42b      	bmi.n	80076d8 <_printf_common+0xb0>
 8007680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007684:	4649      	mov	r1, r9
 8007686:	4638      	mov	r0, r7
 8007688:	47c0      	blx	r8
 800768a:	3001      	adds	r0, #1
 800768c:	d01e      	beq.n	80076cc <_printf_common+0xa4>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	68e5      	ldr	r5, [r4, #12]
 8007692:	6832      	ldr	r2, [r6, #0]
 8007694:	f003 0306 	and.w	r3, r3, #6
 8007698:	2b04      	cmp	r3, #4
 800769a:	bf08      	it	eq
 800769c:	1aad      	subeq	r5, r5, r2
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	6922      	ldr	r2, [r4, #16]
 80076a2:	bf0c      	ite	eq
 80076a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a8:	2500      	movne	r5, #0
 80076aa:	4293      	cmp	r3, r2
 80076ac:	bfc4      	itt	gt
 80076ae:	1a9b      	subgt	r3, r3, r2
 80076b0:	18ed      	addgt	r5, r5, r3
 80076b2:	2600      	movs	r6, #0
 80076b4:	341a      	adds	r4, #26
 80076b6:	42b5      	cmp	r5, r6
 80076b8:	d11a      	bne.n	80076f0 <_printf_common+0xc8>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e008      	b.n	80076d0 <_printf_common+0xa8>
 80076be:	2301      	movs	r3, #1
 80076c0:	4652      	mov	r2, sl
 80076c2:	4649      	mov	r1, r9
 80076c4:	4638      	mov	r0, r7
 80076c6:	47c0      	blx	r8
 80076c8:	3001      	adds	r0, #1
 80076ca:	d103      	bne.n	80076d4 <_printf_common+0xac>
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	3501      	adds	r5, #1
 80076d6:	e7c6      	b.n	8007666 <_printf_common+0x3e>
 80076d8:	18e1      	adds	r1, r4, r3
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	2030      	movs	r0, #48	; 0x30
 80076de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076e2:	4422      	add	r2, r4
 80076e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ec:	3302      	adds	r3, #2
 80076ee:	e7c7      	b.n	8007680 <_printf_common+0x58>
 80076f0:	2301      	movs	r3, #1
 80076f2:	4622      	mov	r2, r4
 80076f4:	4649      	mov	r1, r9
 80076f6:	4638      	mov	r0, r7
 80076f8:	47c0      	blx	r8
 80076fa:	3001      	adds	r0, #1
 80076fc:	d0e6      	beq.n	80076cc <_printf_common+0xa4>
 80076fe:	3601      	adds	r6, #1
 8007700:	e7d9      	b.n	80076b6 <_printf_common+0x8e>
	...

08007704 <_printf_i>:
 8007704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007708:	7e0f      	ldrb	r7, [r1, #24]
 800770a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800770c:	2f78      	cmp	r7, #120	; 0x78
 800770e:	4691      	mov	r9, r2
 8007710:	4680      	mov	r8, r0
 8007712:	460c      	mov	r4, r1
 8007714:	469a      	mov	sl, r3
 8007716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800771a:	d807      	bhi.n	800772c <_printf_i+0x28>
 800771c:	2f62      	cmp	r7, #98	; 0x62
 800771e:	d80a      	bhi.n	8007736 <_printf_i+0x32>
 8007720:	2f00      	cmp	r7, #0
 8007722:	f000 80d8 	beq.w	80078d6 <_printf_i+0x1d2>
 8007726:	2f58      	cmp	r7, #88	; 0x58
 8007728:	f000 80a3 	beq.w	8007872 <_printf_i+0x16e>
 800772c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007734:	e03a      	b.n	80077ac <_printf_i+0xa8>
 8007736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800773a:	2b15      	cmp	r3, #21
 800773c:	d8f6      	bhi.n	800772c <_printf_i+0x28>
 800773e:	a101      	add	r1, pc, #4	; (adr r1, 8007744 <_printf_i+0x40>)
 8007740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007744:	0800779d 	.word	0x0800779d
 8007748:	080077b1 	.word	0x080077b1
 800774c:	0800772d 	.word	0x0800772d
 8007750:	0800772d 	.word	0x0800772d
 8007754:	0800772d 	.word	0x0800772d
 8007758:	0800772d 	.word	0x0800772d
 800775c:	080077b1 	.word	0x080077b1
 8007760:	0800772d 	.word	0x0800772d
 8007764:	0800772d 	.word	0x0800772d
 8007768:	0800772d 	.word	0x0800772d
 800776c:	0800772d 	.word	0x0800772d
 8007770:	080078bd 	.word	0x080078bd
 8007774:	080077e1 	.word	0x080077e1
 8007778:	0800789f 	.word	0x0800789f
 800777c:	0800772d 	.word	0x0800772d
 8007780:	0800772d 	.word	0x0800772d
 8007784:	080078df 	.word	0x080078df
 8007788:	0800772d 	.word	0x0800772d
 800778c:	080077e1 	.word	0x080077e1
 8007790:	0800772d 	.word	0x0800772d
 8007794:	0800772d 	.word	0x0800772d
 8007798:	080078a7 	.word	0x080078a7
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	602a      	str	r2, [r5, #0]
 80077a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0a3      	b.n	80078f8 <_printf_i+0x1f4>
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	6829      	ldr	r1, [r5, #0]
 80077b4:	0606      	lsls	r6, r0, #24
 80077b6:	f101 0304 	add.w	r3, r1, #4
 80077ba:	d50a      	bpl.n	80077d2 <_printf_i+0xce>
 80077bc:	680e      	ldr	r6, [r1, #0]
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	2e00      	cmp	r6, #0
 80077c2:	da03      	bge.n	80077cc <_printf_i+0xc8>
 80077c4:	232d      	movs	r3, #45	; 0x2d
 80077c6:	4276      	negs	r6, r6
 80077c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077cc:	485e      	ldr	r0, [pc, #376]	; (8007948 <_printf_i+0x244>)
 80077ce:	230a      	movs	r3, #10
 80077d0:	e019      	b.n	8007806 <_printf_i+0x102>
 80077d2:	680e      	ldr	r6, [r1, #0]
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077da:	bf18      	it	ne
 80077dc:	b236      	sxthne	r6, r6
 80077de:	e7ef      	b.n	80077c0 <_printf_i+0xbc>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	6820      	ldr	r0, [r4, #0]
 80077e4:	1d19      	adds	r1, r3, #4
 80077e6:	6029      	str	r1, [r5, #0]
 80077e8:	0601      	lsls	r1, r0, #24
 80077ea:	d501      	bpl.n	80077f0 <_printf_i+0xec>
 80077ec:	681e      	ldr	r6, [r3, #0]
 80077ee:	e002      	b.n	80077f6 <_printf_i+0xf2>
 80077f0:	0646      	lsls	r6, r0, #25
 80077f2:	d5fb      	bpl.n	80077ec <_printf_i+0xe8>
 80077f4:	881e      	ldrh	r6, [r3, #0]
 80077f6:	4854      	ldr	r0, [pc, #336]	; (8007948 <_printf_i+0x244>)
 80077f8:	2f6f      	cmp	r7, #111	; 0x6f
 80077fa:	bf0c      	ite	eq
 80077fc:	2308      	moveq	r3, #8
 80077fe:	230a      	movne	r3, #10
 8007800:	2100      	movs	r1, #0
 8007802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007806:	6865      	ldr	r5, [r4, #4]
 8007808:	60a5      	str	r5, [r4, #8]
 800780a:	2d00      	cmp	r5, #0
 800780c:	bfa2      	ittt	ge
 800780e:	6821      	ldrge	r1, [r4, #0]
 8007810:	f021 0104 	bicge.w	r1, r1, #4
 8007814:	6021      	strge	r1, [r4, #0]
 8007816:	b90e      	cbnz	r6, 800781c <_printf_i+0x118>
 8007818:	2d00      	cmp	r5, #0
 800781a:	d04d      	beq.n	80078b8 <_printf_i+0x1b4>
 800781c:	4615      	mov	r5, r2
 800781e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007822:	fb03 6711 	mls	r7, r3, r1, r6
 8007826:	5dc7      	ldrb	r7, [r0, r7]
 8007828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800782c:	4637      	mov	r7, r6
 800782e:	42bb      	cmp	r3, r7
 8007830:	460e      	mov	r6, r1
 8007832:	d9f4      	bls.n	800781e <_printf_i+0x11a>
 8007834:	2b08      	cmp	r3, #8
 8007836:	d10b      	bne.n	8007850 <_printf_i+0x14c>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	07de      	lsls	r6, r3, #31
 800783c:	d508      	bpl.n	8007850 <_printf_i+0x14c>
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	6861      	ldr	r1, [r4, #4]
 8007842:	4299      	cmp	r1, r3
 8007844:	bfde      	ittt	le
 8007846:	2330      	movle	r3, #48	; 0x30
 8007848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800784c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007850:	1b52      	subs	r2, r2, r5
 8007852:	6122      	str	r2, [r4, #16]
 8007854:	f8cd a000 	str.w	sl, [sp]
 8007858:	464b      	mov	r3, r9
 800785a:	aa03      	add	r2, sp, #12
 800785c:	4621      	mov	r1, r4
 800785e:	4640      	mov	r0, r8
 8007860:	f7ff fee2 	bl	8007628 <_printf_common>
 8007864:	3001      	adds	r0, #1
 8007866:	d14c      	bne.n	8007902 <_printf_i+0x1fe>
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	b004      	add	sp, #16
 800786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007872:	4835      	ldr	r0, [pc, #212]	; (8007948 <_printf_i+0x244>)
 8007874:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007878:	6829      	ldr	r1, [r5, #0]
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007880:	6029      	str	r1, [r5, #0]
 8007882:	061d      	lsls	r5, r3, #24
 8007884:	d514      	bpl.n	80078b0 <_printf_i+0x1ac>
 8007886:	07df      	lsls	r7, r3, #31
 8007888:	bf44      	itt	mi
 800788a:	f043 0320 	orrmi.w	r3, r3, #32
 800788e:	6023      	strmi	r3, [r4, #0]
 8007890:	b91e      	cbnz	r6, 800789a <_printf_i+0x196>
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	f023 0320 	bic.w	r3, r3, #32
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	2310      	movs	r3, #16
 800789c:	e7b0      	b.n	8007800 <_printf_i+0xfc>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	f043 0320 	orr.w	r3, r3, #32
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	2378      	movs	r3, #120	; 0x78
 80078a8:	4828      	ldr	r0, [pc, #160]	; (800794c <_printf_i+0x248>)
 80078aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ae:	e7e3      	b.n	8007878 <_printf_i+0x174>
 80078b0:	0659      	lsls	r1, r3, #25
 80078b2:	bf48      	it	mi
 80078b4:	b2b6      	uxthmi	r6, r6
 80078b6:	e7e6      	b.n	8007886 <_printf_i+0x182>
 80078b8:	4615      	mov	r5, r2
 80078ba:	e7bb      	b.n	8007834 <_printf_i+0x130>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	6826      	ldr	r6, [r4, #0]
 80078c0:	6961      	ldr	r1, [r4, #20]
 80078c2:	1d18      	adds	r0, r3, #4
 80078c4:	6028      	str	r0, [r5, #0]
 80078c6:	0635      	lsls	r5, r6, #24
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	d501      	bpl.n	80078d0 <_printf_i+0x1cc>
 80078cc:	6019      	str	r1, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <_printf_i+0x1d2>
 80078d0:	0670      	lsls	r0, r6, #25
 80078d2:	d5fb      	bpl.n	80078cc <_printf_i+0x1c8>
 80078d4:	8019      	strh	r1, [r3, #0]
 80078d6:	2300      	movs	r3, #0
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	4615      	mov	r5, r2
 80078dc:	e7ba      	b.n	8007854 <_printf_i+0x150>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	1d1a      	adds	r2, r3, #4
 80078e2:	602a      	str	r2, [r5, #0]
 80078e4:	681d      	ldr	r5, [r3, #0]
 80078e6:	6862      	ldr	r2, [r4, #4]
 80078e8:	2100      	movs	r1, #0
 80078ea:	4628      	mov	r0, r5
 80078ec:	f7f8 fca0 	bl	8000230 <memchr>
 80078f0:	b108      	cbz	r0, 80078f6 <_printf_i+0x1f2>
 80078f2:	1b40      	subs	r0, r0, r5
 80078f4:	6060      	str	r0, [r4, #4]
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	2300      	movs	r3, #0
 80078fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007900:	e7a8      	b.n	8007854 <_printf_i+0x150>
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	462a      	mov	r2, r5
 8007906:	4649      	mov	r1, r9
 8007908:	4640      	mov	r0, r8
 800790a:	47d0      	blx	sl
 800790c:	3001      	adds	r0, #1
 800790e:	d0ab      	beq.n	8007868 <_printf_i+0x164>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	079b      	lsls	r3, r3, #30
 8007914:	d413      	bmi.n	800793e <_printf_i+0x23a>
 8007916:	68e0      	ldr	r0, [r4, #12]
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	4298      	cmp	r0, r3
 800791c:	bfb8      	it	lt
 800791e:	4618      	movlt	r0, r3
 8007920:	e7a4      	b.n	800786c <_printf_i+0x168>
 8007922:	2301      	movs	r3, #1
 8007924:	4632      	mov	r2, r6
 8007926:	4649      	mov	r1, r9
 8007928:	4640      	mov	r0, r8
 800792a:	47d0      	blx	sl
 800792c:	3001      	adds	r0, #1
 800792e:	d09b      	beq.n	8007868 <_printf_i+0x164>
 8007930:	3501      	adds	r5, #1
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	9903      	ldr	r1, [sp, #12]
 8007936:	1a5b      	subs	r3, r3, r1
 8007938:	42ab      	cmp	r3, r5
 800793a:	dcf2      	bgt.n	8007922 <_printf_i+0x21e>
 800793c:	e7eb      	b.n	8007916 <_printf_i+0x212>
 800793e:	2500      	movs	r5, #0
 8007940:	f104 0619 	add.w	r6, r4, #25
 8007944:	e7f5      	b.n	8007932 <_printf_i+0x22e>
 8007946:	bf00      	nop
 8007948:	08007e65 	.word	0x08007e65
 800794c:	08007e76 	.word	0x08007e76

08007950 <_putc_r>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	460d      	mov	r5, r1
 8007954:	4614      	mov	r4, r2
 8007956:	4606      	mov	r6, r0
 8007958:	b118      	cbz	r0, 8007962 <_putc_r+0x12>
 800795a:	6983      	ldr	r3, [r0, #24]
 800795c:	b90b      	cbnz	r3, 8007962 <_putc_r+0x12>
 800795e:	f7ff f8ef 	bl	8006b40 <__sinit>
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <_putc_r+0x84>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d124      	bne.n	80079b2 <_putc_r+0x62>
 8007968:	6874      	ldr	r4, [r6, #4]
 800796a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800796c:	07d8      	lsls	r0, r3, #31
 800796e:	d405      	bmi.n	800797c <_putc_r+0x2c>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	0599      	lsls	r1, r3, #22
 8007974:	d402      	bmi.n	800797c <_putc_r+0x2c>
 8007976:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007978:	f7ff f9a5 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	3b01      	subs	r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	60a3      	str	r3, [r4, #8]
 8007984:	da05      	bge.n	8007992 <_putc_r+0x42>
 8007986:	69a2      	ldr	r2, [r4, #24]
 8007988:	4293      	cmp	r3, r2
 800798a:	db1c      	blt.n	80079c6 <_putc_r+0x76>
 800798c:	b2eb      	uxtb	r3, r5
 800798e:	2b0a      	cmp	r3, #10
 8007990:	d019      	beq.n	80079c6 <_putc_r+0x76>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	701d      	strb	r5, [r3, #0]
 800799a:	b2ed      	uxtb	r5, r5
 800799c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800799e:	07da      	lsls	r2, r3, #31
 80079a0:	d405      	bmi.n	80079ae <_putc_r+0x5e>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	059b      	lsls	r3, r3, #22
 80079a6:	d402      	bmi.n	80079ae <_putc_r+0x5e>
 80079a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079aa:	f7ff f98d 	bl	8006cc8 <__retarget_lock_release_recursive>
 80079ae:	4628      	mov	r0, r5
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <_putc_r+0x88>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d101      	bne.n	80079bc <_putc_r+0x6c>
 80079b8:	68b4      	ldr	r4, [r6, #8]
 80079ba:	e7d6      	b.n	800796a <_putc_r+0x1a>
 80079bc:	4b07      	ldr	r3, [pc, #28]	; (80079dc <_putc_r+0x8c>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	bf08      	it	eq
 80079c2:	68f4      	ldreq	r4, [r6, #12]
 80079c4:	e7d1      	b.n	800796a <_putc_r+0x1a>
 80079c6:	4629      	mov	r1, r5
 80079c8:	4622      	mov	r2, r4
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff fb6c 	bl	80070a8 <__swbuf_r>
 80079d0:	4605      	mov	r5, r0
 80079d2:	e7e3      	b.n	800799c <_putc_r+0x4c>
 80079d4:	08007e10 	.word	0x08007e10
 80079d8:	08007e30 	.word	0x08007e30
 80079dc:	08007df0 	.word	0x08007df0

080079e0 <_read_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d07      	ldr	r5, [pc, #28]	; (8007a00 <_read_r+0x20>)
 80079e4:	4604      	mov	r4, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	602a      	str	r2, [r5, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f7f9 fab2 	bl	8000f58 <_read>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_read_r+0x1e>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_read_r+0x1e>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20004aa0 	.word	0x20004aa0

08007a04 <_fstat_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_fstat_r+0x20>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	f7f9 faca 	bl	8000faa <_fstat>
 8007a16:	1c43      	adds	r3, r0, #1
 8007a18:	d102      	bne.n	8007a20 <_fstat_r+0x1c>
 8007a1a:	682b      	ldr	r3, [r5, #0]
 8007a1c:	b103      	cbz	r3, 8007a20 <_fstat_r+0x1c>
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	bd38      	pop	{r3, r4, r5, pc}
 8007a22:	bf00      	nop
 8007a24:	20004aa0 	.word	0x20004aa0

08007a28 <_isatty_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	; (8007a44 <_isatty_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7f9 fac9 	bl	8000fca <_isatty>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_isatty_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_isatty_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	20004aa0 	.word	0x20004aa0

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
